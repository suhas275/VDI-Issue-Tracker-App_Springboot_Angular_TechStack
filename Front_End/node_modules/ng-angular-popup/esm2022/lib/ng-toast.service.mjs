import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ToastMessage } from './toast-message.model';
import { ToastType } from './toast-type.enum';
import * as i0 from "@angular/core";
/**
 * Service for displaying toast messages.
 */
export class NgToastService {
    #defaultDuration;
    #toastMessageSource;
    /**
     * Constructs a new NgToastService instance.
     */
    constructor() {
        this.#defaultDuration = 2000;
        this.#toastMessageSource = new Subject();
    }
    /**
     * Displays a toast message.
     * @param message The message to display.
     * @param type The type of the toast message.
     * @param title The optional title of the toast message.
     * @param duration The duration in milliseconds for which the toast message should be displayed. Defaults to the default duration.
     */
    toast(message, type, title, duration = this.#defaultDuration) {
        this.#toastMessageSource.next(new ToastMessage(message, type, title, duration));
    }
    /**
     * Displays a success toast message.
     * @param message The message to display.
     * @param title The optional title of the toast message.
     * @param duration The duration in milliseconds for which the toast message should be displayed. Defaults to the default duration.
     */
    success(message, title, duration = this.#defaultDuration) {
        this.toast(message, ToastType.SUCCESS, title, duration);
    }
    /**
     * Displays an info toast message.
     * @param message The message to display.
     * @param title The optional title of the toast message.
     * @param duration The duration in milliseconds for which the toast message should be displayed. Defaults to the default duration.
     */
    info(message, title, duration = this.#defaultDuration) {
        this.toast(message, ToastType.INFO, title, duration);
    }
    /**
     * Displays a warning toast message.
     * @param message The message to display.
     * @param title The optional title of the toast message.
     * @param duration The duration in milliseconds for which the toast message should be displayed. Defaults to the default duration.
     */
    warning(message, title, duration = this.#defaultDuration) {
        this.toast(message, ToastType.WARNING, title, duration);
    }
    /**
     * Displays a danger/error toast message.
     * @param message The message to display.
     * @param title The optional title of the toast message.
     * @param duration The duration in milliseconds for which the toast message should be displayed. Defaults to the default duration.
     */
    danger(message, title, duration = this.#defaultDuration) {
        this.toast(message, ToastType.DANGER, title, duration);
    }
    /**
     * Returns an observable that emits the toast messages.
     * @returns An observable that emits the toast messages.
     */
    onToastMessage() {
        return this.#toastMessageSource.asObservable();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: NgToastService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: NgToastService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: NgToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXRvYXN0L3NyYy9saWIvbmctdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7QUFNOUM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sY0FBYztJQUN6QixnQkFBZ0IsQ0FBUztJQUN6QixtQkFBbUIsQ0FBd0I7SUFFM0M7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksT0FBTyxFQUFnQixDQUFDO0lBQ3pELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxLQUFLLENBQUMsT0FBZSxFQUFFLElBQWUsRUFBRSxLQUFjLEVBQUUsV0FBbUIsSUFBSSxDQUFDLGdCQUFnQjtRQUNyRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksT0FBTyxDQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsV0FBbUIsSUFBSSxDQUFDLGdCQUFnQjtRQUN0RixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxJQUFJLENBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxXQUFtQixJQUFJLENBQUMsZ0JBQWdCO1FBQ25GLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE9BQU8sQ0FBQyxPQUFlLEVBQUUsS0FBYyxFQUFFLFdBQW1CLElBQUksQ0FBQyxnQkFBZ0I7UUFDdEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsV0FBbUIsSUFBSSxDQUFDLGdCQUFnQjtRQUNyRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksY0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNqRCxDQUFDOzhHQXJFVSxjQUFjO2tIQUFkLGNBQWMsY0FOYixNQUFNOzsyRkFNUCxjQUFjO2tCQVAxQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRvYXN0TWVzc2FnZSB9IGZyb20gJy4vdG9hc3QtbWVzc2FnZS5tb2RlbCc7XG5pbXBvcnQgeyBUb2FzdFR5cGUgfSBmcm9tICcuL3RvYXN0LXR5cGUuZW51bSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuXG4vKipcbiAqIFNlcnZpY2UgZm9yIGRpc3BsYXlpbmcgdG9hc3QgbWVzc2FnZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOZ1RvYXN0U2VydmljZSB7XG4gICNkZWZhdWx0RHVyYXRpb246IG51bWJlcjtcbiAgI3RvYXN0TWVzc2FnZVNvdXJjZTogU3ViamVjdDxUb2FzdE1lc3NhZ2U+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IE5nVG9hc3RTZXJ2aWNlIGluc3RhbmNlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy4jZGVmYXVsdER1cmF0aW9uID0gMjAwMDtcbiAgICB0aGlzLiN0b2FzdE1lc3NhZ2VTb3VyY2UgPSBuZXcgU3ViamVjdDxUb2FzdE1lc3NhZ2U+KCk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgYSB0b2FzdCBtZXNzYWdlLlxuICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgdG9hc3QgbWVzc2FnZS5cbiAgICogQHBhcmFtIHRpdGxlIFRoZSBvcHRpb25hbCB0aXRsZSBvZiB0aGUgdG9hc3QgbWVzc2FnZS5cbiAgICogQHBhcmFtIGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRoZSB0b2FzdCBtZXNzYWdlIHNob3VsZCBiZSBkaXNwbGF5ZWQuIERlZmF1bHRzIHRvIHRoZSBkZWZhdWx0IGR1cmF0aW9uLlxuICAgKi9cbiAgcHVibGljIHRvYXN0KG1lc3NhZ2U6IHN0cmluZywgdHlwZTogVG9hc3RUeXBlLCB0aXRsZT86IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IHRoaXMuI2RlZmF1bHREdXJhdGlvbik6IHZvaWQge1xuICAgIHRoaXMuI3RvYXN0TWVzc2FnZVNvdXJjZS5uZXh0KG5ldyBUb2FzdE1lc3NhZ2UobWVzc2FnZSwgdHlwZSwgdGl0bGUsIGR1cmF0aW9uKSk7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgYSBzdWNjZXNzIHRvYXN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgb3B0aW9uYWwgdGl0bGUgb2YgdGhlIHRvYXN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0aGUgdG9hc3QgbWVzc2FnZSBzaG91bGQgYmUgZGlzcGxheWVkLiBEZWZhdWx0cyB0byB0aGUgZGVmYXVsdCBkdXJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzdWNjZXNzKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIgPSB0aGlzLiNkZWZhdWx0RHVyYXRpb24pOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0KG1lc3NhZ2UsIFRvYXN0VHlwZS5TVUNDRVNTLCB0aXRsZSwgZHVyYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIGFuIGluZm8gdG9hc3QgbWVzc2FnZS5cbiAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheS5cbiAgICogQHBhcmFtIHRpdGxlIFRoZSBvcHRpb25hbCB0aXRsZSBvZiB0aGUgdG9hc3QgbWVzc2FnZS5cbiAgICogQHBhcmFtIGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgZm9yIHdoaWNoIHRoZSB0b2FzdCBtZXNzYWdlIHNob3VsZCBiZSBkaXNwbGF5ZWQuIERlZmF1bHRzIHRvIHRoZSBkZWZhdWx0IGR1cmF0aW9uLlxuICAgKi9cbiAgcHVibGljIGluZm8obWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IHRoaXMuI2RlZmF1bHREdXJhdGlvbik6IHZvaWQge1xuICAgIHRoaXMudG9hc3QobWVzc2FnZSwgVG9hc3RUeXBlLklORk8sIHRpdGxlLCBkdXJhdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgYSB3YXJuaW5nIHRvYXN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgb3B0aW9uYWwgdGl0bGUgb2YgdGhlIHRvYXN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0aGUgdG9hc3QgbWVzc2FnZSBzaG91bGQgYmUgZGlzcGxheWVkLiBEZWZhdWx0cyB0byB0aGUgZGVmYXVsdCBkdXJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyB3YXJuaW5nKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIgPSB0aGlzLiNkZWZhdWx0RHVyYXRpb24pOiB2b2lkIHtcbiAgICB0aGlzLnRvYXN0KG1lc3NhZ2UsIFRvYXN0VHlwZS5XQVJOSU5HLCB0aXRsZSwgZHVyYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIGEgZGFuZ2VyL2Vycm9yIHRvYXN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSB0aXRsZSBUaGUgb3B0aW9uYWwgdGl0bGUgb2YgdGhlIHRvYXN0IG1lc3NhZ2UuXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGZvciB3aGljaCB0aGUgdG9hc3QgbWVzc2FnZSBzaG91bGQgYmUgZGlzcGxheWVkLiBEZWZhdWx0cyB0byB0aGUgZGVmYXVsdCBkdXJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBkYW5nZXIobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IHRoaXMuI2RlZmF1bHREdXJhdGlvbik6IHZvaWQge1xuICAgIHRoaXMudG9hc3QobWVzc2FnZSwgVG9hc3RUeXBlLkRBTkdFUiwgdGl0bGUsIGR1cmF0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgdG9hc3QgbWVzc2FnZXMuXG4gICAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgdGhhdCBlbWl0cyB0aGUgdG9hc3QgbWVzc2FnZXMuXG4gICAqL1xuICBwdWJsaWMgb25Ub2FzdE1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxUb2FzdE1lc3NhZ2U+IHtcbiAgICByZXR1cm4gdGhpcy4jdG9hc3RNZXNzYWdlU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=