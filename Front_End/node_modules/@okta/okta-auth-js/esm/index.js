/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and limitations under the License.
 */

import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';
import _createClass from '@babel/runtime/helpers/createClass';
import _regeneratorRuntime from '@babel/runtime/regenerator';
import _typeof from '@babel/runtime/helpers/typeof';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import crossFetch from 'cross-fetch';
import idx from '@okta/okta-idx-js';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _get from '@babel/runtime/helpers/get';
import _defineProperty from '@babel/runtime/helpers/defineProperty';

function _createSuper$n(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$n(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$n() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var CustomError = /*#__PURE__*/function (_Error) {
  _inherits(CustomError, _Error);

  var _super = _createSuper$n(CustomError);

  function CustomError(message) {
    var _this;

    _classCallCheck(this, CustomError);

    _this = _super.call(this, message);
    Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof CustomError ? this.constructor : void 0).prototype);
    return _this;
  }

  return CustomError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function _createSuper$m(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$m(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$m() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AuthApiError = /*#__PURE__*/function (_CustomError) {
  _inherits(AuthApiError, _CustomError);

  var _super = _createSuper$m(AuthApiError);

  function AuthApiError(err, xhr) {
    var _this;

    _classCallCheck(this, AuthApiError);

    var message = err.errorSummary;
    _this = _super.call(this, message);
    _this.name = 'AuthApiError';
    _this.errorSummary = err.errorSummary;
    _this.errorCode = err.errorCode;
    _this.errorLink = err.errorLink;
    _this.errorId = err.errorId;
    _this.errorCauses = err.errorCauses;

    if (xhr) {
      _this.xhr = xhr;
    }

    return _this;
  }

  return AuthApiError;
}(CustomError);

function _createSuper$l(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$l(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$l() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AuthPollStopError = /*#__PURE__*/function (_CustomError) {
  _inherits(AuthPollStopError, _CustomError);

  var _super = _createSuper$l(AuthPollStopError);

  function AuthPollStopError() {
    _classCallCheck(this, AuthPollStopError);

    var message = 'The poll was stopped by the sdk';
    return _super.call(this, message);
  }

  return AuthPollStopError;
}(CustomError);

function _createSuper$k(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$k(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$k() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AuthSdkError = /*#__PURE__*/function (_CustomError) {
  _inherits(AuthSdkError, _CustomError);

  var _super = _createSuper$k(AuthSdkError);

  function AuthSdkError(msg, xhr) {
    var _this;

    _classCallCheck(this, AuthSdkError);

    _this = _super.call(this, msg);
    _this.name = 'AuthSdkError';
    _this.errorCode = 'INTERNAL';
    _this.errorSummary = msg;
    _this.errorLink = 'INTERNAL';
    _this.errorId = 'INTERNAL';
    _this.errorCauses = [];

    if (xhr) {
      _this.xhr = xhr;
    }

    return _this;
  }

  return AuthSdkError;
}(CustomError);

function _createSuper$j(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$j(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$j() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var OAuthError = /*#__PURE__*/function (_CustomError) {
  _inherits(OAuthError, _CustomError);

  var _super = _createSuper$j(OAuthError);

  function OAuthError(errorCode, summary) {
    var _this;

    _classCallCheck(this, OAuthError);

    _this = _super.call(this, summary);
    _this.name = 'OAuthError';
    _this.errorCode = errorCode;
    _this.errorSummary = summary;
    return _this;
  }

  return OAuthError;
}(CustomError);

function isAuthApiError(obj) {
  return obj instanceof AuthApiError;
}

var a = function a(str) {
  return atob(str);
};

var b = function b(str) {
  return btoa(str);
};

var c = typeof crypto === 'undefined' ? null : crypto;

function stringToBase64Url(str) {
  var b64 = b(str);
  return base64ToBase64Url(b64);
}
function base64ToBase64Url(b64) {
  return b64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
}
function base64UrlToBase64(b64u) {
  return b64u.replace(/-/g, '+').replace(/_/g, '/');
}
function base64UrlToString(b64u) {
  var b64 = base64UrlToBase64(b64u);

  switch (b64.length % 4) {
    case 0:
      break;

    case 2:
      b64 += '==';
      break;

    case 3:
      b64 += '=';
      break;

    default:
      throw new AuthSdkError('Not a valid Base64Url');
  }

  var utf8 = a(b64);

  try {
    return decodeURIComponent(escape(utf8));
  } catch (e) {
    return utf8;
  }
}
function stringToBuffer(str) {
  var buffer = new Uint8Array(str.length);

  for (var i = 0; i < str.length; i++) {
    buffer[i] = str.charCodeAt(i);
  }

  return buffer;
}
function base64UrlDecode(str) {
  return a(base64UrlToBase64(str));
}

function getOidcHash(str) {
  var buffer = new TextEncoder().encode(str);
  return c.subtle.digest('SHA-256', buffer).then(function (arrayBuffer) {
    var intBuffer = new Uint8Array(arrayBuffer);
    var firstHalf = intBuffer.slice(0, 16);
    var hash = String.fromCharCode.apply(null, firstHalf);
    var b64u = stringToBase64Url(hash);
    return b64u;
  });
}

function getNativeConsole() {
  if (typeof window !== 'undefined') {
    return window.console;
  } else if (typeof console !== 'undefined') {
    return console;
  } else {
    return undefined;
  }
}
function getConsole() {
  var nativeConsole = getNativeConsole();

  if (nativeConsole && nativeConsole.log) {
    return nativeConsole;
  }

  return {
    log: function log() {},
    warn: function warn() {},
    group: function group() {},
    groupEnd: function groupEnd() {}
  };
}
function warn(text) {
  getConsole().warn('[okta-auth-sdk] WARN: ' + text);
}
function deprecate(text) {
  getConsole().warn('[okta-auth-sdk] DEPRECATION: ' + text);
}
function deprecateWrap(text, fn) {
  return function () {
    deprecate(text);
    return fn.apply(null, arguments);
  };
}

function urlParamsToObject(hashOrSearch) {
  var plus2space = /\+/g;
  var paramSplit = /([^&=]+)=?([^&]*)/g;
  var fragment = hashOrSearch || '';

  if (fragment.charAt(0) === '#' && fragment.charAt(1) === '/') {
    fragment = fragment.substring(2);
  }

  if (fragment.charAt(0) === '#' || fragment.charAt(0) === '?') {
    fragment = fragment.substring(1);
  }

  var obj = {};
  var param;

  while (true) {
    param = paramSplit.exec(fragment);

    if (!param) {
      break;
    }

    var key = param[1];
    var value = param[2];

    if (key === 'id_token' || key === 'access_token' || key === 'code') {
      obj[key] = value;
    } else {
      obj[key] = decodeURIComponent(value.replace(plus2space, ' '));
    }
  }

  return obj;
}

function isEmailVerifyCallback(urlPath) {
  return /(stateTokenExternalId=)/i.test(urlPath) && /(state=)/i.test(urlPath);
}
function parseEmailVerifyCallback(urlPath) {
  return urlParamsToObject(urlPath);
}

function isoToUTCString(str) {
  var parts = str.match(/\d+/g),
      isoTime = Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]),
      isoDate = new Date(isoTime);
  return isoDate.toUTCString();
}
function genRandomString(length) {
  var randomCharset = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  var random = '';

  for (var c = 0, cl = randomCharset.length; c < length; ++c) {
    random += randomCharset[Math.floor(Math.random() * cl)];
  }

  return random;
}
function delay(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
}

function bind(fn, ctx) {
  var additionalArgs = Array.prototype.slice.call(arguments, 2);
  return function () {
    var args = Array.prototype.slice.call(arguments);
    args = additionalArgs.concat(args);
    return fn.apply(ctx, args);
  };
}
function extend() {
  var obj1 = arguments[0];
  var objArray = [].slice.call(arguments, 1);
  objArray.forEach(function (obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop) && obj[prop] !== undefined) {
        obj1[prop] = obj[prop];
      }
    }
  });
  return obj1;
}
function removeNils(obj) {
  var cleaned = {};

  for (var prop in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, prop)) {
      var value = obj[prop];

      if (value !== null && value !== undefined) {
        cleaned[prop] = value;
      }
    }
  }

  return cleaned;
}
function clone(obj) {
  if (obj) {
    var str = JSON.stringify(obj);

    if (str) {
      return JSON.parse(str);
    }
  }

  return obj;
}
function omit(obj) {
  var newobj = {};

  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    props[_key - 1] = arguments[_key];
  }

  for (var p in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, p) && props.indexOf(p) == -1) {
      newobj[p] = obj[p];
    }
  }

  return clone(newobj);
}
function find(collection, searchParams) {
  var c = collection.length;

  while (c--) {
    var item = collection[c];
    var found = true;

    for (var prop in searchParams) {
      if (!Object.prototype.hasOwnProperty.call(searchParams, prop)) {
        continue;
      }

      if (item[prop] !== searchParams[prop]) {
        found = false;
        break;
      }
    }

    if (found) {
      return item;
    }
  }
}
function getLink(obj, linkName, altName) {
  if (!obj || !obj._links) {
    return;
  }

  var link = clone(obj._links[linkName]);

  if (link && link.name && altName) {
    if (link.name === altName) {
      return link;
    }
  } else {
    return link;
  }
}

function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
}
function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}
function isNumber(obj) {
  return Object.prototype.toString.call(obj) === '[object Number]';
}
function isFunction(fn) {
  return !!fn && {}.toString.call(fn) === '[object Function]';
}
function isPromise(obj) {
  return obj && obj.finally && typeof obj.finally === 'function';
}

function isAbsoluteUrl(url) {
  return /^(?:[a-z]+:)?\/\//i.test(url);
}
function toAbsoluteUrl() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var baseUrl = arguments.length > 1 ? arguments[1] : undefined;

  if (isAbsoluteUrl(url)) {
    return url;
  }

  baseUrl = removeTrailingSlash(baseUrl);
  return url[0] === '/' ? "".concat(baseUrl).concat(url) : "".concat(baseUrl, "/").concat(url);
}
function toRelativeUrl() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var baseUrl = arguments.length > 1 ? arguments[1] : undefined;

  if (isAbsoluteUrl(url)) {
    url = url.substring(baseUrl.length);
  }

  return url[0] === '/' ? url : "/".concat(url);
}
function toQueryString(obj) {
  var str = [];

  if (obj !== null) {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && obj[key] !== undefined && obj[key] !== null) {
        str.push(key + '=' + encodeURIComponent(obj[key]));
      }
    }
  }

  if (str.length) {
    return '?' + str.join('&');
  } else {
    return '';
  }
}
function removeTrailingSlash(path) {
  if (!path) {
    return;
  }

  var trimmed = path.replace(/^\s+|\s+$/gm, '');
  trimmed = trimmed.replace(/\/+$/, '');
  return trimmed;
}

function verifyToken$1(idToken, key) {
  key = clone(key);
  var format = 'jwk';
  var algo = {
    name: 'RSASSA-PKCS1-v1_5',
    hash: {
      name: 'SHA-256'
    }
  };
  var extractable = true;
  var usages = ['verify'];
  delete key.use;
  return c.subtle.importKey(format, key, algo, extractable, usages).then(function (cryptoKey) {
    var jwt = idToken.split('.');
    var payload = stringToBuffer(jwt[0] + '.' + jwt[1]);
    var b64Signature = base64UrlDecode(jwt[2]);
    var signature = stringToBuffer(b64Signature);
    return c.subtle.verify(algo, cryptoKey, signature, payload);
  });
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  stringToBase64Url: stringToBase64Url,
  base64ToBase64Url: base64ToBase64Url,
  base64UrlToBase64: base64UrlToBase64,
  base64UrlToString: base64UrlToString,
  stringToBuffer: stringToBuffer,
  base64UrlDecode: base64UrlDecode,
  getOidcHash: getOidcHash,
  verifyToken: verifyToken$1,
  atob: a,
  btoa: b,
  webcrypto: c
});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

var STATE_TOKEN_KEY_NAME = 'oktaStateToken';
var DEFAULT_POLLING_DELAY = 500;
var DEFAULT_MAX_CLOCK_SKEW = 300;
var DEFAULT_CACHE_DURATION = 86400;
var REDIRECT_OAUTH_PARAMS_NAME = 'okta-oauth-redirect-params';
var REDIRECT_STATE_COOKIE_NAME = 'okta-oauth-state';
var REDIRECT_NONCE_COOKIE_NAME = 'okta-oauth-nonce';
var TOKEN_STORAGE_NAME = 'okta-token-storage';
var CACHE_STORAGE_NAME = 'okta-cache-storage';
var PKCE_STORAGE_NAME = 'okta-pkce-storage';
var TRANSACTION_STORAGE_NAME = 'okta-transaction-storage';
var SHARED_TRANSACTION_STORAGE_NAME = 'okta-shared-transaction-storage';
var ORIGINAL_URI_STORAGE_NAME = 'okta-original-uri-storage';
var IDX_RESPONSE_STORAGE_NAME = 'okta-idx-response-storage';
var ACCESS_TOKEN_STORAGE_KEY = 'accessToken';
var ID_TOKEN_STORAGE_KEY = 'idToken';
var REFRESH_TOKEN_STORAGE_KEY = 'refreshToken';
var REFERRER_PATH_STORAGE_KEY = 'referrerPath';
var MIN_VERIFIER_LENGTH = 43;
var MAX_VERIFIER_LENGTH = 128;
var DEFAULT_CODE_CHALLENGE_METHOD = 'S256';
var IDX_API_VERSION = '1.0.0';

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  STATE_TOKEN_KEY_NAME: STATE_TOKEN_KEY_NAME,
  DEFAULT_POLLING_DELAY: DEFAULT_POLLING_DELAY,
  DEFAULT_MAX_CLOCK_SKEW: DEFAULT_MAX_CLOCK_SKEW,
  DEFAULT_CACHE_DURATION: DEFAULT_CACHE_DURATION,
  REDIRECT_OAUTH_PARAMS_NAME: REDIRECT_OAUTH_PARAMS_NAME,
  REDIRECT_STATE_COOKIE_NAME: REDIRECT_STATE_COOKIE_NAME,
  REDIRECT_NONCE_COOKIE_NAME: REDIRECT_NONCE_COOKIE_NAME,
  TOKEN_STORAGE_NAME: TOKEN_STORAGE_NAME,
  CACHE_STORAGE_NAME: CACHE_STORAGE_NAME,
  PKCE_STORAGE_NAME: PKCE_STORAGE_NAME,
  TRANSACTION_STORAGE_NAME: TRANSACTION_STORAGE_NAME,
  SHARED_TRANSACTION_STORAGE_NAME: SHARED_TRANSACTION_STORAGE_NAME,
  ORIGINAL_URI_STORAGE_NAME: ORIGINAL_URI_STORAGE_NAME,
  IDX_RESPONSE_STORAGE_NAME: IDX_RESPONSE_STORAGE_NAME,
  ACCESS_TOKEN_STORAGE_KEY: ACCESS_TOKEN_STORAGE_KEY,
  ID_TOKEN_STORAGE_KEY: ID_TOKEN_STORAGE_KEY,
  REFRESH_TOKEN_STORAGE_KEY: REFRESH_TOKEN_STORAGE_KEY,
  REFERRER_PATH_STORAGE_KEY: REFERRER_PATH_STORAGE_KEY,
  MIN_VERIFIER_LENGTH: MIN_VERIFIER_LENGTH,
  MAX_VERIFIER_LENGTH: MAX_VERIFIER_LENGTH,
  DEFAULT_CODE_CHALLENGE_METHOD: DEFAULT_CODE_CHALLENGE_METHOD,
  IDX_API_VERSION: IDX_API_VERSION
});

function setRequestHeader(authClient, headerName, headerValue) {
  authClient.options.headers = authClient.options.headers || {};
  authClient.options.headers[headerName] = headerValue;
}

function httpRequest(sdk, options) {
  options = options || {};
  var url = options.url,
      method = options.method,
      args = options.args,
      saveAuthnState = options.saveAuthnState,
      accessToken = options.accessToken,
      withCredentials = options.withCredentials === true,
      storageUtil = sdk.options.storageUtil,
      storage = storageUtil.storage,
      httpCache = sdk.storageManager.getHttpCache(sdk.options.cookies);

  if (options.cacheResponse) {
    var cacheContents = httpCache.getStorage();
    var cachedResponse = cacheContents[url];

    if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {
      return Promise.resolve(cachedResponse.response);
    }
  }

  var oktaUserAgentHeader = sdk._oktaUserAgent.getHttpHeader();

  var headers = Object.assign({
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }, oktaUserAgentHeader);
  Object.assign(headers, sdk.options.headers, options.headers);
  headers = removeNils(headers);

  if (accessToken && isString(accessToken)) {
    headers['Authorization'] = 'Bearer ' + accessToken;
  }

  var ajaxOptions = {
    headers: headers,
    data: args || undefined,
    withCredentials: withCredentials
  };
  var err, res;
  return sdk.options.httpRequestClient(method, url, ajaxOptions).then(function (resp) {
    res = resp.responseText;

    if (res && isString(res)) {
      res = JSON.parse(res);

      if (res && _typeof(res) === 'object' && !res.headers) {
        res.headers = resp.headers;
      }
    }

    if (saveAuthnState) {
      if (!res.stateToken) {
        storage.delete(STATE_TOKEN_KEY_NAME);
      }
    }

    if (res && res.stateToken && res.expiresAt) {
      storage.set(STATE_TOKEN_KEY_NAME, res.stateToken, res.expiresAt, sdk.options.cookies);
    }

    if (res && options.cacheResponse) {
      httpCache.updateStorage(url, {
        expiresAt: Math.floor(Date.now() / 1000) + DEFAULT_CACHE_DURATION,
        response: res
      });
    }

    return res;
  }).catch(function (resp) {
    var serverErr = resp.responseText || {};

    if (isString(serverErr)) {
      try {
        serverErr = JSON.parse(serverErr);
      } catch (e) {
        serverErr = {
          errorSummary: 'Unknown error'
        };
      }
    }

    if (resp.status >= 500) {
      serverErr.errorSummary = 'Unknown error';
    }

    if (sdk.options.transformErrorXHR) {
      resp = sdk.options.transformErrorXHR(clone(resp));
    }

    err = new AuthApiError(serverErr, resp);

    if (err.errorCode === 'E0000011') {
      storage.delete(STATE_TOKEN_KEY_NAME);
    }

    throw err;
  });
}
function get(sdk, url, options) {
  url = isAbsoluteUrl(url) ? url : sdk.getIssuerOrigin() + url;
  var getOptions = {
    url: url,
    method: 'GET'
  };
  Object.assign(getOptions, options);
  return httpRequest(sdk, getOptions);
}
function post(sdk, url, args, options) {
  url = isAbsoluteUrl(url) ? url : sdk.getIssuerOrigin() + url;
  var postOptions = {
    url: url,
    method: 'POST',
    args: args,
    saveAuthnState: true
  };
  Object.assign(postOptions, options);
  return httpRequest(sdk, postOptions);
}

function addStateToken(res, options) {
  var builtArgs = {};
  Object.assign(builtArgs, options);

  if (!builtArgs.stateToken && res.stateToken) {
    builtArgs.stateToken = res.stateToken;
  }

  return builtArgs;
}
function getStateToken(res) {
  return addStateToken(res);
}

function getPollFn(sdk, res, ref) {
  return function (options) {
    var delay$1;
    var rememberDevice;
    var autoPush;
    var transactionCallBack;

    if (isNumber(options)) {
      delay$1 = options;
    } else if (isObject(options)) {
      options = options;
      delay$1 = options.delay;
      rememberDevice = options.rememberDevice;
      autoPush = options.autoPush;
      transactionCallBack = options.transactionCallBack;
    }

    if (!delay$1 && delay$1 !== 0) {
      delay$1 = DEFAULT_POLLING_DELAY;
    }

    var pollLink = getLink(res, 'next', 'poll');

    function pollFn() {
      var opts = {};

      if (typeof autoPush === 'function') {
        try {
          opts.autoPush = !!autoPush();
        } catch (e) {
          return Promise.reject(new AuthSdkError('AutoPush resulted in an error.'));
        }
      } else if (autoPush !== undefined && autoPush !== null) {
        opts.autoPush = !!autoPush;
      }

      if (typeof rememberDevice === 'function') {
        try {
          opts.rememberDevice = !!rememberDevice();
        } catch (e) {
          return Promise.reject(new AuthSdkError('RememberDevice resulted in an error.'));
        }
      } else if (rememberDevice !== undefined && rememberDevice !== null) {
        opts.rememberDevice = !!rememberDevice;
      }

      var href = pollLink.href + toQueryString(opts);
      return post(sdk, href, getStateToken(res), {
        saveAuthnState: false,
        withCredentials: true
      });
    }

    ref.isPolling = true;
    var retryCount = 0;

    var recursivePoll = function recursivePoll() {
      if (!ref.isPolling) {
        return Promise.reject(new AuthPollStopError());
      }

      return pollFn().then(function (pollRes) {
        retryCount = 0;

        if (pollRes.factorResult && pollRes.factorResult === 'WAITING') {
          if (!ref.isPolling) {
            throw new AuthPollStopError();
          }

          if (typeof transactionCallBack === 'function') {
            transactionCallBack(pollRes);
          }

          return delay(delay$1).then(recursivePoll);
        } else {
          ref.isPolling = false;
          return new AuthTransaction(sdk, pollRes);
        }
      }).catch(function (err) {
        if (err.xhr && (err.xhr.status === 0 || err.xhr.status === 429) && retryCount <= 4) {
          var delayLength = Math.pow(2, retryCount) * 1000;
          retryCount++;
          return delay(delayLength).then(recursivePoll);
        }

        throw err;
      });
    };

    return recursivePoll().catch(function (err) {
      ref.isPolling = false;
      throw err;
    });
  };
}

var AuthTransaction = function AuthTransaction(sdk) {
  var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  _classCallCheck(this, AuthTransaction);

  if (res) {
    this.data = res;

    if (this.data.interactionHandle) {
      this.status = res.status;
      return;
    }

    Object.assign(this, flattenEmbedded(sdk, res, res, {}));
    delete this.stateToken;

    if (res.status === 'RECOVERY_CHALLENGE' && !res._links) {
      this.cancel = function () {
        return Promise.resolve(new AuthTransaction(sdk));
      };
    }
  }
};

function link2fn(sdk, res, obj, link, ref) {
  if (Array.isArray(link)) {
    return function (name, opts) {
      if (!name) {
        throw new AuthSdkError('Must provide a link name');
      }

      var lk = find(link, {
        name: name
      });

      if (!lk) {
        throw new AuthSdkError('No link found for that name');
      }

      return link2fn(sdk, res, obj, lk, ref)(opts);
    };
  } else if (link.hints && link.hints.allow && link.hints.allow.length === 1) {
    var method = link.hints.allow[0];

    switch (method) {
      case 'GET':
        return function () {
          return get(sdk, link.href, {
            withCredentials: true
          });
        };

      case 'POST':
        return function (opts) {
          if (ref && ref.isPolling) {
            ref.isPolling = false;
          }

          var data = addStateToken(res, opts);

          if (res.status === 'MFA_ENROLL' || res.status === 'FACTOR_ENROLL') {
            Object.assign(data, {
              factorType: obj.factorType,
              provider: obj.provider
            });
          }

          var params = {};
          var autoPush = data.autoPush;

          if (autoPush !== undefined) {
            if (typeof autoPush === 'function') {
              try {
                params.autoPush = !!autoPush();
              } catch (e) {
                return Promise.reject(new AuthSdkError('AutoPush resulted in an error.'));
              }
            } else if (autoPush !== null) {
              params.autoPush = !!autoPush;
            }

            data = omit(data, 'autoPush');
          }

          var rememberDevice = data.rememberDevice;

          if (rememberDevice !== undefined) {
            if (typeof rememberDevice === 'function') {
              try {
                params.rememberDevice = !!rememberDevice();
              } catch (e) {
                return Promise.reject(new AuthSdkError('RememberDevice resulted in an error.'));
              }
            } else if (rememberDevice !== null) {
              params.rememberDevice = !!rememberDevice;
            }

            data = omit(data, 'rememberDevice');
          } else if (data.profile && data.profile.updatePhone !== undefined) {
            if (data.profile.updatePhone) {
              params.updatePhone = true;
            }

            data.profile = omit(data.profile, 'updatePhone');
          }

          var href = link.href + toQueryString(params);
          return postToTransaction(sdk, href, data);
        };
    }
  }
}

function links2fns(sdk, res, obj, ref) {
  var fns = {};

  for (var linkName in obj._links) {
    if (!Object.prototype.hasOwnProperty.call(obj._links, linkName)) {
      continue;
    }

    var link = obj._links[linkName];

    if (linkName === 'next') {
      linkName = link.name;
    }

    if (link.type) {
      fns[linkName] = link;
      continue;
    }

    switch (linkName) {
      case 'poll':
        fns.poll = getPollFn(sdk, res, ref);
        break;

      default:
        var fn = link2fn(sdk, res, obj, link, ref);

        if (fn) {
          fns[linkName] = fn;
        }

    }
  }

  return fns;
}

function flattenEmbedded(sdk, res, obj, ref) {
  obj = obj || res;
  obj = clone(obj);

  if (Array.isArray(obj)) {
    var objArr = [];

    for (var o = 0, ol = obj.length; o < ol; o++) {
      objArr.push(flattenEmbedded(sdk, res, obj[o], ref));
    }

    return objArr;
  }

  var embedded = obj._embedded || {};

  for (var key in embedded) {
    if (!Object.prototype.hasOwnProperty.call(embedded, key)) {
      continue;
    }

    if (isObject(embedded[key]) || Array.isArray(embedded[key])) {
      embedded[key] = flattenEmbedded(sdk, res, embedded[key], ref);
    }
  }

  var fns = links2fns(sdk, res, obj, ref);
  Object.assign(embedded, fns);
  obj = omit(obj, '_embedded', '_links');
  Object.assign(obj, embedded);
  return obj;
}

function transactionStatus(sdk, args) {
  args = addStateToken(sdk, args);
  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn', args, {
    withCredentials: true
  });
}

function resumeTransaction(sdk, args) {
  if (!args || !args.stateToken) {
    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);

    if (stateToken) {
      args = {
        stateToken: stateToken
      };
    } else {
      return Promise.reject(new AuthSdkError('No transaction to resume'));
    }
  }

  return sdk.tx.status(args).then(function (res) {
    return new AuthTransaction(sdk, res);
  });
}

function introspect$1(sdk, args) {
  if (!args || !args.stateToken) {
    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);

    if (stateToken) {
      args = {
        stateToken: stateToken
      };
    } else {
      return Promise.reject(new AuthSdkError('No transaction to evaluate'));
    }
  }

  return transactionStep(sdk, args).then(function (res) {
    return new AuthTransaction(sdk, res);
  });
}

function transactionStep(sdk, args) {
  args = addStateToken(sdk, args);
  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn/introspect', args, {
    withCredentials: true
  });
}

function transactionExists(sdk) {
  return !!sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);
}

function postToTransaction(sdk, url, args, options) {
  options = Object.assign({
    withCredentials: true
  }, options);
  return post(sdk, url, args, options).then(function (res) {
    return new AuthTransaction(sdk, res);
  });
}

var TransactionState = function TransactionState() {
  _classCallCheck(this, TransactionState);
};

function dec2hex(dec) {
  return ('0' + dec.toString(16)).substr(-2);
}

function getRandomString(length) {
  var a = new Uint8Array(Math.ceil(length / 2));
  c.getRandomValues(a);
  var str = Array.from(a, dec2hex).join('');
  return str.slice(0, length);
}

function generateVerifier(prefix) {
  var verifier = prefix || '';

  if (verifier.length < MIN_VERIFIER_LENGTH) {
    verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);
  }

  return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);
}

function computeChallenge(str) {
  var buffer = new TextEncoder().encode(str);
  return c.subtle.digest('SHA-256', buffer).then(function (arrayBuffer) {
    var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));
    var b64u = stringToBase64Url(hash);
    return b64u;
  });
}

var PKCE = {
  DEFAULT_CODE_CHALLENGE_METHOD: DEFAULT_CODE_CHALLENGE_METHOD,
  generateVerifier: generateVerifier,
  computeChallenge: computeChallenge
};

function sessionExists(sdk) {
  return sdk.session.get().then(function (res) {
    if (res.status === 'ACTIVE') {
      return true;
    }

    return false;
  }).catch(function () {
    return false;
  });
}

function getSession(sdk) {
  return get(sdk, '/api/v1/sessions/me', {
    withCredentials: true
  }).then(function (session) {
    var res = omit(session, '_links');

    res.refresh = function () {
      return post(sdk, getLink(session, 'refresh').href, {}, {
        withCredentials: true
      });
    };

    res.user = function () {
      return get(sdk, getLink(session, 'user').href, {
        withCredentials: true
      });
    };

    return res;
  }).catch(function () {
    return {
      status: 'INACTIVE'
    };
  });
}

function closeSession(sdk) {
  return httpRequest(sdk, {
    url: sdk.getIssuerOrigin() + '/api/v1/sessions/me',
    method: 'DELETE',
    withCredentials: true
  });
}

function refreshSession(sdk) {
  return post(sdk, '/api/v1/sessions/me/lifecycle/refresh', {}, {
    withCredentials: true
  });
}

function setCookieAndRedirect(sdk, sessionToken, redirectUrl) {
  redirectUrl = redirectUrl || window.location.href;
  window.location.assign(sdk.getIssuerOrigin() + '/login/sessionCookieRedirect' + toQueryString({
    checkAccountSetupComplete: true,
    token: sessionToken,
    redirectUrl: redirectUrl
  }));
}

function convertTokenParamsToOAuthParams(tokenParams) {
  if (!tokenParams.clientId) {
    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');
  }

  if (isString(tokenParams.responseType) && tokenParams.responseType.indexOf(' ') !== -1) {
    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');
  }

  var oauthParams = {
    'client_id': tokenParams.clientId,
    'code_challenge': tokenParams.codeChallenge,
    'code_challenge_method': tokenParams.codeChallengeMethod,
    'display': tokenParams.display,
    'idp': tokenParams.idp,
    'idp_scope': tokenParams.idpScope,
    'login_hint': tokenParams.loginHint,
    'max_age': tokenParams.maxAge,
    'nonce': tokenParams.nonce,
    'prompt': tokenParams.prompt,
    'redirect_uri': tokenParams.redirectUri,
    'response_mode': tokenParams.responseMode,
    'response_type': tokenParams.responseType,
    'sessionToken': tokenParams.sessionToken,
    'state': tokenParams.state
  };
  oauthParams = removeNils(oauthParams);
  ['idp_scope', 'response_type'].forEach(function (mayBeArray) {
    if (Array.isArray(oauthParams[mayBeArray])) {
      oauthParams[mayBeArray] = oauthParams[mayBeArray].join(' ');
    }
  });

  if (tokenParams.responseType.indexOf('id_token') !== -1 && tokenParams.scopes.indexOf('openid') === -1) {
    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');
  } else {
    oauthParams.scope = tokenParams.scopes.join(' ');
  }

  return oauthParams;
}
function buildAuthorizeParams(tokenParams) {
  var oauthQueryParams = convertTokenParamsToOAuthParams(tokenParams);
  return toQueryString(Object.assign(Object.assign({}, oauthQueryParams), tokenParams.extraParams && Object.assign({}, tokenParams.extraParams)));
}

function validateOptions(options) {
  if (!options.clientId) {
    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');
  }

  if (!options.redirectUri) {
    throw new AuthSdkError('The redirectUri passed to /authorize must also be passed to /token');
  }

  if (!options.authorizationCode && !options.interactionCode) {
    throw new AuthSdkError('An authorization code (returned from /authorize) must be passed to /token');
  }

  if (!options.codeVerifier) {
    throw new AuthSdkError('The "codeVerifier" (generated and saved by your app) must be passed to /token');
  }
}

function getPostData(sdk, options) {
  var params = removeNils({
    'client_id': options.clientId,
    'redirect_uri': options.redirectUri,
    'grant_type': options.interactionCode ? 'interaction_code' : 'authorization_code',
    'code_verifier': options.codeVerifier
  });

  if (options.interactionCode) {
    params['interaction_code'] = options.interactionCode;
  } else if (options.authorizationCode) {
    params.code = options.authorizationCode;
  }

  var clientSecret = sdk.options.clientSecret;

  if (clientSecret) {
    params['client_secret'] = clientSecret;
  }

  return toQueryString(params).slice(1);
}

function postToTokenEndpoint(sdk, options, urls) {
  validateOptions(options);
  var data = getPostData(sdk, options);
  var headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };
  return httpRequest(sdk, {
    url: urls.tokenUrl,
    method: 'POST',
    args: data,
    headers: headers
  });
}
function postRefreshToken(sdk, options, refreshToken) {
  return httpRequest(sdk, {
    url: refreshToken.tokenUrl,
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    args: Object.entries({
      client_id: options.clientId,
      grant_type: 'refresh_token',
      scope: refreshToken.scopes.join(' '),
      refresh_token: refreshToken.refreshToken
    }).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          value = _ref2[1];

      return name + '=' + encodeURIComponent(value);
    }).join('&')
  });
}

function getWellKnown(sdk, issuer) {
  var authServerUri = issuer || sdk.options.issuer;
  return get(sdk, authServerUri + '/.well-known/openid-configuration', {
    cacheResponse: true
  });
}
function getKey(sdk, issuer, kid) {
  var httpCache = sdk.storageManager.getHttpCache(sdk.options.cookies);
  return getWellKnown(sdk, issuer).then(function (wellKnown) {
    var jwksUri = wellKnown['jwks_uri'];
    var cacheContents = httpCache.getStorage();
    var cachedResponse = cacheContents[jwksUri];

    if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {
      var cachedKey = find(cachedResponse.response.keys, {
        kid: kid
      });

      if (cachedKey) {
        return cachedKey;
      }
    }

    httpCache.clearStorage(jwksUri);
    return get(sdk, jwksUri, {
      cacheResponse: true
    }).then(function (res) {
      var key = find(res.keys, {
        kid: kid
      });

      if (key) {
        return key;
      }

      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\'s keys');
    });
  });
}

function addListener(eventTarget, name, fn) {
  if (eventTarget.addEventListener) {
    eventTarget.addEventListener(name, fn);
  } else {
    eventTarget.attachEvent('on' + name, fn);
  }
}
function removeListener(eventTarget, name, fn) {
  if (eventTarget.removeEventListener) {
    eventTarget.removeEventListener(name, fn);
  } else {
    eventTarget.detachEvent('on' + name, fn);
  }
}
function loadFrame(src) {
  var iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = src;
  return document.body.appendChild(iframe);
}
function loadPopup(src, options) {
  var title = options.popupTitle || 'External Identity Provider User Authentication';
  var appearance = 'toolbar=no, scrollbars=yes, resizable=yes, ' + 'top=100, left=500, width=600, height=600';
  return window.open(src, title, appearance);
}
function addPostMessageListener(sdk, timeout, state) {
  var responseHandler;
  var timeoutId;
  var msgReceivedOrTimeout = new Promise(function (resolve, reject) {
    responseHandler = function responseHandler(e) {
      if (!e.data || e.data.state !== state) {
        return;
      }

      if (e.origin !== sdk.getIssuerOrigin()) {
        return reject(new AuthSdkError('The request does not match client configuration'));
      }

      resolve(e.data);
    };

    addListener(window, 'message', responseHandler);
    timeoutId = setTimeout(function () {
      reject(new AuthSdkError('OAuth flow timed out'));
    }, timeout || 120000);
  });
  return msgReceivedOrTimeout.finally(function () {
    clearTimeout(timeoutId);
    removeListener(window, 'message', responseHandler);
  });
}

function generateState() {
  return genRandomString(64);
}
function generateNonce() {
  return genRandomString(64);
}

function getIssuer(sdk) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var issuer = removeTrailingSlash(options.issuer) || sdk.options.issuer;
  return issuer;
}

function getOAuthBaseUrl(sdk) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var issuer = getIssuer(sdk, options);
  var baseUrl = issuer.indexOf('/oauth2') > 0 ? issuer : issuer + '/oauth2';
  return baseUrl;
}
function getOAuthDomain(sdk) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var issuer = getIssuer(sdk, options);
  var domain = issuer.split('/oauth2')[0];
  return domain;
}
function getOAuthUrls(sdk, options) {
  if (arguments.length > 2) {
    throw new AuthSdkError('As of version 3.0, "getOAuthUrls" takes only a single set of options');
  }

  options = options || {};
  var authorizeUrl = removeTrailingSlash(options.authorizeUrl) || sdk.options.authorizeUrl;
  var issuer = getIssuer(sdk, options);
  var userinfoUrl = removeTrailingSlash(options.userinfoUrl) || sdk.options.userinfoUrl;
  var tokenUrl = removeTrailingSlash(options.tokenUrl) || sdk.options.tokenUrl;
  var logoutUrl = removeTrailingSlash(options.logoutUrl) || sdk.options.logoutUrl;
  var revokeUrl = removeTrailingSlash(options.revokeUrl) || sdk.options.revokeUrl;
  var baseUrl = getOAuthBaseUrl(sdk, options);
  authorizeUrl = authorizeUrl || baseUrl + '/v1/authorize';
  userinfoUrl = userinfoUrl || baseUrl + '/v1/userinfo';
  tokenUrl = tokenUrl || baseUrl + '/v1/token';
  revokeUrl = revokeUrl || baseUrl + '/v1/revoke';
  logoutUrl = logoutUrl || baseUrl + '/v1/logout';
  return {
    issuer: issuer,
    authorizeUrl: authorizeUrl,
    userinfoUrl: userinfoUrl,
    tokenUrl: tokenUrl,
    revokeUrl: revokeUrl,
    logoutUrl: logoutUrl
  };
}

var isWindowsPhone = /windows phone|iemobile|wpdesktop/i;
function isBrowser() {
  return typeof document !== 'undefined' && typeof window !== 'undefined';
}
function isIE11OrLess() {
  return isBrowser() && !!document.documentMode && document.documentMode <= 11;
}
function getUserAgent$1() {
  return navigator.userAgent;
}
function isFingerprintSupported() {
  var agent = getUserAgent$1();
  return agent && !isWindowsPhone.test(agent);
}
function isPopupPostMessageSupported() {
  if (!isBrowser()) {
    return false;
  }

  var isIE8or9 = document.documentMode && document.documentMode < 10;

  if (window.postMessage && !isIE8or9) {
    return true;
  }

  return false;
}
function isTokenVerifySupported() {
  return typeof c !== 'undefined' && c !== null && typeof c.subtle !== 'undefined' && typeof Uint8Array !== 'undefined';
}
function hasTextEncoder() {
  return typeof TextEncoder !== 'undefined';
}
function isPKCESupported() {
  return isTokenVerifySupported() && hasTextEncoder();
}
function isHTTPS() {
  if (!isBrowser()) {
    return false;
  }

  return window.location.protocol === 'https:';
}
function isLocalhost() {
  return isBrowser() && window.location.hostname === 'localhost';
}

var features = /*#__PURE__*/Object.freeze({
  __proto__: null,
  isBrowser: isBrowser,
  isIE11OrLess: isIE11OrLess,
  getUserAgent: getUserAgent$1,
  isFingerprintSupported: isFingerprintSupported,
  isPopupPostMessageSupported: isPopupPostMessageSupported,
  isTokenVerifySupported: isTokenVerifySupported,
  hasTextEncoder: hasTextEncoder,
  isPKCESupported: isPKCESupported,
  isHTTPS: isHTTPS,
  isLocalhost: isLocalhost
});

function getDefaultTokenParams(sdk) {
  var _sdk$options = sdk.options,
      pkce = _sdk$options.pkce,
      clientId = _sdk$options.clientId,
      redirectUri = _sdk$options.redirectUri,
      responseType = _sdk$options.responseType,
      responseMode = _sdk$options.responseMode,
      scopes = _sdk$options.scopes,
      state = _sdk$options.state,
      ignoreSignature = _sdk$options.ignoreSignature;
  var defaultRedirectUri = isBrowser() ? window.location.href : undefined;
  return removeNils({
    pkce: pkce,
    clientId: clientId,
    redirectUri: redirectUri || defaultRedirectUri,
    responseType: responseType || ['token', 'id_token'],
    responseMode: responseMode,
    state: state || generateState(),
    nonce: generateNonce(),
    scopes: scopes || ['openid', 'email'],
    ignoreSignature: ignoreSignature
  });
}

function isInteractionRequiredError(error) {
  if (error.name !== 'OAuthError') {
    return false;
  }

  var oauthError = error;
  return oauthError.errorCode === 'interaction_required';
}
function isAuthorizationCodeError(sdk, error) {
  if (error.name !== 'AuthApiError') {
    return false;
  }

  var authApiError = error;
  var errorResponse = authApiError.xhr;
  var responseJSON = errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.responseJSON;
  return sdk.options.pkce && (responseJSON === null || responseJSON === void 0 ? void 0 : responseJSON.error) === 'invalid_grant';
}

function hasTokensInHash(hash) {
  return /((id|access)_token=)/i.test(hash);
}
function hasAuthorizationCode(hashOrSearch) {
  return /(code=)/i.test(hashOrSearch);
}
function hasInteractionCode(hashOrSearch) {
  return /(interaction_code=)/i.test(hashOrSearch);
}
function hasErrorInUrl(hashOrSearch) {
  return /(error=)/i.test(hashOrSearch) || /(error_description)/i.test(hashOrSearch);
}
function isRedirectUri(uri, sdk) {
  var authParams = sdk.options;
  return uri && uri.indexOf(authParams.redirectUri) === 0;
}
function isCodeFlow(options) {
  return options.pkce || options.responseType === 'code' || options.responseMode === 'query';
}
function getHashOrSearch(options) {
  var codeFlow = isCodeFlow(options);
  var useQuery = codeFlow && options.responseMode !== 'fragment';
  return useQuery ? window.location.search : window.location.hash;
}
function isLoginRedirect(sdk) {
  if (!isRedirectUri(window.location.href, sdk)) {
    return false;
  }

  var codeFlow = isCodeFlow(sdk.options);
  var hashOrSearch = getHashOrSearch(sdk.options);

  if (hasErrorInUrl(hashOrSearch)) {
    return true;
  }

  if (codeFlow) {
    var hasCode = hasAuthorizationCode(hashOrSearch) || hasInteractionCode(hashOrSearch);
    return hasCode;
  }

  return hasTokensInHash(window.location.hash);
}
function isInteractionRequired(sdk, hashOrSearch) {
  if (!hashOrSearch) {
    if (!isLoginRedirect(sdk)) {
      return false;
    }

    hashOrSearch = getHashOrSearch(sdk.options);
  }

  return /(error=interaction_required)/i.test(hashOrSearch);
}

function prepareTokenParams(sdk, tokenParams) {
  var defaults = getDefaultTokenParams(sdk);
  tokenParams = Object.assign({}, defaults, clone(tokenParams));

  if (tokenParams.pkce === false) {
    return Promise.resolve(tokenParams);
  }

  if (!sdk.features.isPKCESupported()) {
    var errorMessage = 'PKCE requires a modern browser with encryption support running in a secure context.';

    if (!sdk.features.isHTTPS()) {
      errorMessage += '\nThe current page is not being served with HTTPS protocol. PKCE requires secure HTTPS protocol.';
    }

    if (!sdk.features.hasTextEncoder()) {
      errorMessage += '\n"TextEncoder" is not defined. To use PKCE, you may need to include a polyfill/shim for this browser.';
    }

    return Promise.reject(new AuthSdkError(errorMessage));
  }

  if (!tokenParams.codeChallengeMethod) {
    tokenParams.codeChallengeMethod = DEFAULT_CODE_CHALLENGE_METHOD;
  }

  tokenParams.responseType = 'code';
  return getWellKnown(sdk, null).then(function (res) {
    var methods = res['code_challenge_methods_supported'] || [];

    if (methods.indexOf(tokenParams.codeChallengeMethod) === -1) {
      throw new AuthSdkError('Invalid code_challenge_method');
    }
  }).then(function () {
    if (!tokenParams.codeVerifier) {
      tokenParams.codeVerifier = PKCE.generateVerifier();
    }

    return PKCE.computeChallenge(tokenParams.codeVerifier);
  }).then(function (codeChallenge) {
    var clonedParams = clone(tokenParams) || {};
    Object.assign(clonedParams, tokenParams, {
      codeChallenge: codeChallenge
    });
    return clonedParams;
  });
}

function isSameRefreshToken(a, b) {
  return a.refreshToken === b.refreshToken;
}
function isRefreshTokenError(err) {
  if (!isAuthApiError(err)) {
    return false;
  }

  if (!err.xhr || !err.xhr.responseJSON) {
    return false;
  }

  var responseJSON = err.xhr.responseJSON;

  if (responseJSON.error === 'invalid_grant') {
    return true;
  }

  return false;
}

function validateClaims(sdk, claims, validationParams) {
  var aud = validationParams.clientId;
  var iss = validationParams.issuer;
  var nonce = validationParams.nonce;

  if (!claims || !iss || !aud) {
    throw new AuthSdkError('The jwt, iss, and aud arguments are all required');
  }

  if (nonce && claims.nonce !== nonce) {
    throw new AuthSdkError('OAuth flow response nonce doesn\'t match request nonce');
  }

  var now = Math.floor(Date.now() / 1000);

  if (claims.iss !== iss) {
    throw new AuthSdkError('The issuer [' + claims.iss + '] ' + 'does not match [' + iss + ']');
  }

  if (claims.aud !== aud) {
    throw new AuthSdkError('The audience [' + claims.aud + '] ' + 'does not match [' + aud + ']');
  }

  if (claims.iat > claims.exp) {
    throw new AuthSdkError('The JWT expired before it was issued');
  }

  if (!sdk.options.ignoreLifetime) {
    if (now - sdk.options.maxClockSkew > claims.exp) {
      throw new AuthSdkError('The JWT expired and is no longer valid');
    }

    if (claims.iat > now + sdk.options.maxClockSkew) {
      throw new AuthSdkError('The JWT was issued in the future');
    }
  }
}

function isObjectWithProperties(obj) {
  if (!obj || _typeof(obj) !== 'object' || Object.values(obj).length === 0) {
    return false;
  }

  return true;
}

function isOAuthTransactionMeta(obj) {
  if (!isObjectWithProperties(obj)) {
    return false;
  }

  return !!obj.redirectUri || !!obj.responseType;
}
function isPKCETransactionMeta(obj) {
  if (!isOAuthTransactionMeta(obj)) {
    return false;
  }

  return !!obj.codeVerifier;
}
function isIdxTransactionMeta(obj) {
  if (!isPKCETransactionMeta(obj)) {
    return false;
  }

  return !!obj.interactionHandle;
}
function isCustomAuthTransactionMeta(obj) {
  if (!isObjectWithProperties(obj)) {
    return false;
  }

  var isAllStringValues = Object.values(obj).find(function (value) {
    return typeof value !== 'string';
  }) === undefined;
  return isAllStringValues;
}
function isTransactionMeta(obj) {
  if (isOAuthTransactionMeta(obj) || isCustomAuthTransactionMeta(obj)) {
    return true;
  }

  return false;
}

var IdxStatus;

(function (IdxStatus) {
  IdxStatus["SUCCESS"] = "SUCCESS";
  IdxStatus["PENDING"] = "PENDING";
  IdxStatus["FAILURE"] = "FAILURE";
  IdxStatus["TERMINAL"] = "TERMINAL";
  IdxStatus["CANCELED"] = "CANCELED";
})(IdxStatus || (IdxStatus = {}));

var AuthenticatorKey;

(function (AuthenticatorKey) {
  AuthenticatorKey["OKTA_PASSWORD"] = "okta_password";
  AuthenticatorKey["OKTA_EMAIL"] = "okta_email";
  AuthenticatorKey["OKTA_VERIFIER"] = "okta_verifier";
  AuthenticatorKey["PHONE_NUMBER"] = "phone_number";
  AuthenticatorKey["GOOGLE_AUTHENTICATOR"] = "google_otp";
})(AuthenticatorKey || (AuthenticatorKey = {}));

var IdxFeature;

(function (IdxFeature) {
  IdxFeature[IdxFeature["PASSWORD_RECOVERY"] = 0] = "PASSWORD_RECOVERY";
  IdxFeature[IdxFeature["REGISTRATION"] = 1] = "REGISTRATION";
  IdxFeature[IdxFeature["SOCIAL_IDP"] = 2] = "SOCIAL_IDP";
})(IdxFeature || (IdxFeature = {}));

function isToken(obj) {
  if (obj && (obj.accessToken || obj.idToken || obj.refreshToken) && Array.isArray(obj.scopes)) {
    return true;
  }

  return false;
}
function isAccessToken(obj) {
  return obj && obj.accessToken;
}
function isIDToken(obj) {
  return obj && obj.idToken;
}
function isRefreshToken(obj) {
  return obj && obj.refreshToken;
}

function validateToken(token, type) {
  if (!isIDToken(token) && !isAccessToken(token) && !isRefreshToken(token)) {
    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and one of: an idToken, accessToken, or refreshToken property');
  }

  if (type === 'accessToken' && !isAccessToken(token)) {
    throw new AuthSdkError('invalid accessToken');
  }

  if (type === 'idToken' && !isIDToken(token)) {
    throw new AuthSdkError('invalid idToken');
  }

  if (type === 'refreshToken' && !isRefreshToken(token)) {
    throw new AuthSdkError('invalid refreshToken');
  }
}

function decodeToken(token) {
  var jwt = token.split('.');
  var decodedToken;

  try {
    decodedToken = {
      header: JSON.parse(base64UrlToString(jwt[0])),
      payload: JSON.parse(base64UrlToString(jwt[1])),
      signature: jwt[2]
    };
  } catch (e) {
    throw new AuthSdkError('Malformed token');
  }

  return decodedToken;
}

function revokeToken(sdk, token) {
  return Promise.resolve().then(function () {
    var accessToken;
    var refreshToken;

    if (token) {
      accessToken = token.accessToken;
      refreshToken = token.refreshToken;
    }

    if (!accessToken && !refreshToken) {
      throw new AuthSdkError('A valid access or refresh token object is required');
    }

    var clientId = sdk.options.clientId;
    var clientSecret = sdk.options.clientSecret;

    if (!clientId) {
      throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to revoke a token');
    }

    var revokeUrl = getOAuthUrls(sdk).revokeUrl;
    var args = toQueryString({
      token_type_hint: refreshToken ? 'refresh_token' : 'access_token',
      token: refreshToken || accessToken
    }).slice(1);
    var creds = clientSecret ? b("".concat(clientId, ":").concat(clientSecret)) : b(clientId);
    return post(sdk, revokeUrl, args, {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + creds
      }
    });
  });
}

function exchangeCodeForTokens(sdk, tokenParams, urls) {
  urls = urls || getOAuthUrls(sdk, tokenParams);
  tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));
  var _tokenParams = tokenParams,
      authorizationCode = _tokenParams.authorizationCode,
      interactionCode = _tokenParams.interactionCode,
      codeVerifier = _tokenParams.codeVerifier,
      clientId = _tokenParams.clientId,
      redirectUri = _tokenParams.redirectUri,
      scopes = _tokenParams.scopes,
      ignoreSignature = _tokenParams.ignoreSignature,
      state = _tokenParams.state;
  var getTokenOptions = {
    clientId: clientId,
    redirectUri: redirectUri,
    authorizationCode: authorizationCode,
    interactionCode: interactionCode,
    codeVerifier: codeVerifier
  };
  return postToTokenEndpoint(sdk, getTokenOptions, urls).then(function (response) {
    var responseType = ['token'];

    if (scopes.indexOf('openid') !== -1) {
      responseType.push('id_token');
    }

    var handleResponseOptions = {
      clientId: clientId,
      redirectUri: redirectUri,
      scopes: scopes,
      responseType: responseType,
      ignoreSignature: ignoreSignature
    };
    return handleOAuthResponse(sdk, handleResponseOptions, response, urls).then(function (response) {
      response.code = authorizationCode;
      response.state = state;
      return response;
    });
  }).finally(function () {
    sdk.transactionManager.clear();
  });
}

function verifyToken(_x, _x2, _x3) {
  return _verifyToken.apply(this, arguments);
}

function _verifyToken() {
  _verifyToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sdk, token, validationParams) {
    var jwt, configuredIssuer, _yield$getWellKnown, issuer, validationOptions, key, valid, hash;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!token || !token.idToken)) {
              _context.next = 2;
              break;
            }

            throw new AuthSdkError('Only idTokens may be verified');

          case 2:
            jwt = decodeToken(token.idToken);
            configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;
            _context.next = 6;
            return getWellKnown(sdk, configuredIssuer);

          case 6:
            _yield$getWellKnown = _context.sent;
            issuer = _yield$getWellKnown.issuer;
            validationOptions = Object.assign({
              clientId: sdk.options.clientId,
              ignoreSignature: sdk.options.ignoreSignature
            }, validationParams, {
              issuer: issuer
            });
            validateClaims(sdk, jwt.payload, validationOptions);

            if (!(validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported())) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", token);

          case 12:
            _context.next = 14;
            return getKey(sdk, token.issuer, jwt.header.kid);

          case 14:
            key = _context.sent;
            _context.next = 17;
            return verifyToken$1(token.idToken, key);

          case 17:
            valid = _context.sent;

            if (valid) {
              _context.next = 20;
              break;
            }

            throw new AuthSdkError('The token signature is not valid');

          case 20:
            if (!(validationParams && validationParams.accessToken && token.claims.at_hash)) {
              _context.next = 26;
              break;
            }

            _context.next = 23;
            return getOidcHash(validationParams.accessToken);

          case 23:
            hash = _context.sent;

            if (!(hash !== token.claims.at_hash)) {
              _context.next = 26;
              break;
            }

            throw new AuthSdkError('Token hash verification failed');

          case 26:
            return _context.abrupt("return", token);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _verifyToken.apply(this, arguments);
}

function validateResponse(res, oauthParams) {
  if (res['error'] || res['error_description']) {
    throw new OAuthError(res['error'], res['error_description']);
  }

  if (res.state !== oauthParams.state) {
    throw new AuthSdkError('OAuth flow response state doesn\'t match request state');
  }
}

function handleOAuthResponse(sdk, tokenParams, res, urls) {
  var pkce = sdk.options.pkce !== false;

  if (pkce && (res.code || res.interaction_code)) {
    return exchangeCodeForTokens(sdk, Object.assign({}, tokenParams, {
      authorizationCode: res.code,
      interactionCode: res.interaction_code
    }), urls);
  }

  tokenParams = tokenParams || getDefaultTokenParams(sdk);
  urls = urls || getOAuthUrls(sdk, tokenParams);
  var responseType = tokenParams.responseType;

  if (!Array.isArray(responseType)) {
    responseType = [responseType];
  }

  var scopes;

  if (res.scope) {
    scopes = res.scope.split(' ');
  } else {
    scopes = clone(tokenParams.scopes);
  }

  var clientId = tokenParams.clientId || sdk.options.clientId;
  return Promise.resolve().then(function () {
    validateResponse(res, tokenParams);
  }).then(function () {
    var tokenDict = {};
    var expiresIn = res.expires_in;
    var tokenType = res.token_type;
    var accessToken = res.access_token;
    var idToken = res.id_token;
    var refreshToken = res.refresh_token;
    var now = Math.floor(Date.now() / 1000);

    if (accessToken) {
      var accessJwt = sdk.token.decode(accessToken);
      tokenDict.accessToken = {
        accessToken: accessToken,
        claims: accessJwt.payload,
        expiresAt: Number(expiresIn) + now,
        tokenType: tokenType,
        scopes: scopes,
        authorizeUrl: urls.authorizeUrl,
        userinfoUrl: urls.userinfoUrl
      };
    }

    if (refreshToken) {
      tokenDict.refreshToken = {
        refreshToken: refreshToken,
        expiresAt: Number(expiresIn) + now,
        scopes: scopes,
        tokenUrl: urls.tokenUrl,
        authorizeUrl: urls.authorizeUrl,
        issuer: urls.issuer
      };
    }

    if (idToken) {
      var idJwt = sdk.token.decode(idToken);
      var idTokenObj = {
        idToken: idToken,
        claims: idJwt.payload,
        expiresAt: idJwt.payload.exp - idJwt.payload.iat + now,
        scopes: scopes,
        authorizeUrl: urls.authorizeUrl,
        issuer: urls.issuer,
        clientId: clientId
      };
      var validationParams = {
        clientId: clientId,
        issuer: urls.issuer,
        nonce: tokenParams.nonce,
        accessToken: accessToken
      };

      if (tokenParams.ignoreSignature !== undefined) {
        validationParams.ignoreSignature = tokenParams.ignoreSignature;
      }

      return verifyToken(sdk, idTokenObj, validationParams).then(function () {
        tokenDict.idToken = idTokenObj;
        return tokenDict;
      });
    }

    return tokenDict;
  }).then(function (tokenDict) {
    if (responseType.indexOf('token') !== -1 && !tokenDict.accessToken) {
      throw new AuthSdkError('Unable to parse OAuth flow response: response type "token" was requested but "access_token" was not returned.');
    }

    if (responseType.indexOf('id_token') !== -1 && !tokenDict.idToken) {
      throw new AuthSdkError('Unable to parse OAuth flow response: response type "id_token" was requested but "id_token" was not returned.');
    }

    return {
      tokens: tokenDict,
      state: res.state,
      code: res.code
    };
  });
}

function getToken(sdk, options) {
  if (arguments.length > 2) {
    return Promise.reject(new AuthSdkError('As of version 3.0, "getToken" takes only a single set of options'));
  }

  options = options || {};
  var popupWindow = options.popupWindow;
  options.popupWindow = undefined;
  return prepareTokenParams(sdk, options).then(function (tokenParams) {
    var sessionTokenOverrides = {
      prompt: 'none',
      responseMode: 'okta_post_message',
      display: null
    };
    var idpOverrides = {
      display: 'popup'
    };

    if (options.sessionToken) {
      Object.assign(tokenParams, sessionTokenOverrides);
    } else if (options.idp) {
      Object.assign(tokenParams, idpOverrides);
    }

    var requestUrl, endpoint, urls;
    urls = getOAuthUrls(sdk, tokenParams);
    endpoint = options.codeVerifier ? urls.tokenUrl : urls.authorizeUrl;
    requestUrl = endpoint + buildAuthorizeParams(tokenParams);
    var flowType;

    if (tokenParams.sessionToken || tokenParams.display === null) {
      flowType = 'IFRAME';
    } else if (tokenParams.display === 'popup') {
      flowType = 'POPUP';
    } else {
      flowType = 'IMPLICIT';
    }

    switch (flowType) {
      case 'IFRAME':
        var iframePromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);
        var iframeEl = loadFrame(requestUrl);
        return iframePromise.then(function (res) {
          return handleOAuthResponse(sdk, tokenParams, res, urls);
        }).finally(function () {
          if (document.body.contains(iframeEl)) {
            iframeEl.parentElement.removeChild(iframeEl);
          }
        });

      case 'POPUP':
        var oauthPromise;

        if (tokenParams.responseMode === 'okta_post_message') {
          if (!sdk.features.isPopupPostMessageSupported()) {
            throw new AuthSdkError('This browser doesn\'t have full postMessage support');
          }

          oauthPromise = addPostMessageListener(sdk, options.timeout, tokenParams.state);
        }

        if (popupWindow) {
          popupWindow.location.assign(requestUrl);
        }

        var popupPromise = new Promise(function (resolve, reject) {
          var closePoller = setInterval(function () {
            if (!popupWindow || popupWindow.closed) {
              clearInterval(closePoller);
              reject(new AuthSdkError('Unable to parse OAuth flow response'));
            }
          }, 100);
          oauthPromise.then(function (res) {
            clearInterval(closePoller);
            resolve(res);
          }).catch(function (err) {
            clearInterval(closePoller);
            reject(err);
          });
        });
        return popupPromise.then(function (res) {
          return handleOAuthResponse(sdk, tokenParams, res, urls);
        }).finally(function () {
          if (popupWindow && !popupWindow.closed) {
            popupWindow.close();
          }
        });

      default:
        throw new AuthSdkError('The full page redirect flow is not supported');
    }
  });
}

function getWithoutPrompt(sdk, options) {
  if (arguments.length > 2) {
    return Promise.reject(new AuthSdkError('As of version 3.0, "getWithoutPrompt" takes only a single set of options'));
  }

  options = clone(options) || {};
  Object.assign(options, {
    prompt: 'none',
    responseMode: 'okta_post_message',
    display: null
  });
  return getToken(sdk, options);
}

function renewTokensWithRefresh(_x, _x2, _x3) {
  return _renewTokensWithRefresh.apply(this, arguments);
}

function _renewTokensWithRefresh() {
  _renewTokensWithRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sdk, tokenParams, refreshTokenObject) {
    var clientId, renewTokenParams, tokenResponse, urls, _yield$handleOAuthRes, tokens, refreshToken;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            clientId = sdk.options.clientId;

            if (clientId) {
              _context.next = 3;
              break;
            }

            throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');

          case 3:
            renewTokenParams = Object.assign({}, tokenParams, {
              clientId: clientId
            });
            _context.next = 6;
            return postRefreshToken(sdk, renewTokenParams, refreshTokenObject);

          case 6:
            tokenResponse = _context.sent;
            urls = getOAuthUrls(sdk, tokenParams);
            _context.next = 10;
            return handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);

          case 10:
            _yield$handleOAuthRes = _context.sent;
            tokens = _yield$handleOAuthRes.tokens;
            refreshToken = tokens.refreshToken;

            if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {
              sdk.tokenManager.updateRefreshToken(refreshToken);
            }

            return _context.abrupt("return", tokens);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _renewTokensWithRefresh.apply(this, arguments);
}

function throwInvalidTokenError() {
  throw new AuthSdkError('Renew must be passed a token with an array of scopes and an accessToken or idToken');
}

function getSingleToken(originalToken, tokens) {
  if (isIDToken(originalToken)) {
    return tokens.idToken;
  }

  if (isAccessToken(originalToken)) {
    return tokens.accessToken;
  }

  throwInvalidTokenError();
}

function renewToken(_x, _x2) {
  return _renewToken.apply(this, arguments);
}

function _renewToken() {
  _renewToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sdk, token) {
    var tokens, responseType, scopes, authorizeUrl, userinfoUrl, issuer;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!isIDToken(token) && !isAccessToken(token)) {
              throwInvalidTokenError();
            }

            tokens = sdk.tokenManager.getTokensSync();

            if (!tokens.refreshToken) {
              _context.next = 7;
              break;
            }

            _context.next = 5;
            return renewTokensWithRefresh(sdk, {
              scopes: token.scopes
            }, tokens.refreshToken);

          case 5:
            tokens = _context.sent;
            return _context.abrupt("return", getSingleToken(token, tokens));

          case 7:
            if (sdk.options.pkce) {
              responseType = 'code';
            } else if (isAccessToken(token)) {
              responseType = 'token';
            } else {
              responseType = 'id_token';
            }

            scopes = token.scopes, authorizeUrl = token.authorizeUrl, userinfoUrl = token.userinfoUrl, issuer = token.issuer;
            return _context.abrupt("return", getWithoutPrompt(sdk, {
              responseType: responseType,
              scopes: scopes,
              authorizeUrl: authorizeUrl,
              userinfoUrl: userinfoUrl,
              issuer: issuer
            }).then(function (res) {
              return getSingleToken(token, res.tokens);
            }));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _renewToken.apply(this, arguments);
}

function renewTokens(_x, _x2) {
  return _renewTokens.apply(this, arguments);
}

function _renewTokens() {
  _renewTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sdk, options) {
    var tokens, accessToken, idToken, scopes, authorizeUrl, userinfoUrl, issuer, _getDefaultTokenParam, responseType;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            tokens = sdk.tokenManager.getTokensSync();

            if (!tokens.refreshToken) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return", renewTokensWithRefresh(sdk, options, tokens.refreshToken));

          case 3:
            if (!(!tokens.accessToken && !tokens.idToken)) {
              _context.next = 5;
              break;
            }

            throw new AuthSdkError('renewTokens() was called but there is no existing token');

          case 5:
            accessToken = tokens.accessToken || {};
            idToken = tokens.idToken || {};
            scopes = accessToken.scopes || idToken.scopes;

            if (scopes) {
              _context.next = 10;
              break;
            }

            throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');

          case 10:
            authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;

            if (authorizeUrl) {
              _context.next = 13;
              break;
            }

            throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');

          case 13:
            userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;
            issuer = idToken.issuer || sdk.options.issuer;
            options = Object.assign({
              scopes: scopes,
              authorizeUrl: authorizeUrl,
              userinfoUrl: userinfoUrl,
              issuer: issuer
            }, options);

            if (sdk.options.pkce) {
              options.responseType = 'code';
            } else {
              _getDefaultTokenParam = getDefaultTokenParams(sdk), responseType = _getDefaultTokenParam.responseType;
              options.responseType = responseType;
            }

            return _context.abrupt("return", getWithoutPrompt(sdk, options).then(function (res) {
              return res.tokens;
            }));

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _renewTokens.apply(this, arguments);
}

function getUserInfo(_x, _x2, _x3) {
  return _getUserInfo.apply(this, arguments);
}

function _getUserInfo() {
  _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sdk, accessTokenObject, idTokenObject) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (accessTokenObject) {
              _context.next = 4;
              break;
            }

            _context.next = 3;
            return sdk.tokenManager.getTokens();

          case 3:
            accessTokenObject = _context.sent.accessToken;

          case 4:
            if (idTokenObject) {
              _context.next = 8;
              break;
            }

            _context.next = 7;
            return sdk.tokenManager.getTokens();

          case 7:
            idTokenObject = _context.sent.idToken;

          case 8:
            if (!(!accessTokenObject || !isAccessToken(accessTokenObject))) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", Promise.reject(new AuthSdkError('getUserInfo requires an access token object')));

          case 10:
            if (!(!idTokenObject || !isIDToken(idTokenObject))) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", Promise.reject(new AuthSdkError('getUserInfo requires an ID token object')));

          case 12:
            return _context.abrupt("return", httpRequest(sdk, {
              url: accessTokenObject.userinfoUrl,
              method: 'GET',
              accessToken: accessTokenObject.accessToken
            }).then(function (userInfo) {
              if (userInfo.sub === idTokenObject.claims.sub) {
                return userInfo;
              }

              return Promise.reject(new AuthSdkError('getUserInfo request was rejected due to token mismatch'));
            }).catch(function (err) {
              if (err.xhr && (err.xhr.status === 401 || err.xhr.status === 403)) {
                var authenticateHeader;

                if (err.xhr.headers && isFunction(err.xhr.headers.get) && err.xhr.headers.get('WWW-Authenticate')) {
                  authenticateHeader = err.xhr.headers.get('WWW-Authenticate');
                } else if (isFunction(err.xhr.getResponseHeader)) {
                  authenticateHeader = err.xhr.getResponseHeader('WWW-Authenticate');
                }

                if (authenticateHeader) {
                  var errorMatches = authenticateHeader.match(/error="(.*?)"/) || [];
                  var errorDescriptionMatches = authenticateHeader.match(/error_description="(.*?)"/) || [];
                  var error = errorMatches[1];
                  var errorDescription = errorDescriptionMatches[1];

                  if (error && errorDescription) {
                    err = new OAuthError(error, errorDescription);
                  }
                }
              }

              throw err;
            }));

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getUserInfo.apply(this, arguments);
}

function getWithPopup(sdk, options) {
  if (arguments.length > 2) {
    return Promise.reject(new AuthSdkError('As of version 3.0, "getWithPopup" takes only a single set of options'));
  }

  var popupWindow = loadPopup('/', options);
  options = clone(options) || {};
  Object.assign(options, {
    display: 'popup',
    responseMode: 'okta_post_message',
    popupWindow: popupWindow
  });
  return getToken(sdk, options);
}

function getWithRedirect(sdk, options) {
  if (arguments.length > 2) {
    return Promise.reject(new AuthSdkError('As of version 3.0, "getWithRedirect" takes only a single set of options'));
  }

  options = clone(options) || {};
  return prepareTokenParams(sdk, options).then(function (tokenParams) {
    var urls = getOAuthUrls(sdk, options);
    var requestUrl = urls.authorizeUrl + buildAuthorizeParams(tokenParams);
    var issuer = sdk.options.issuer;
    var responseType = tokenParams.responseType,
        state = tokenParams.state,
        nonce = tokenParams.nonce,
        scopes = tokenParams.scopes,
        clientId = tokenParams.clientId,
        ignoreSignature = tokenParams.ignoreSignature,
        redirectUri = tokenParams.redirectUri,
        codeVerifier = tokenParams.codeVerifier,
        codeChallenge = tokenParams.codeChallenge,
        codeChallengeMethod = tokenParams.codeChallengeMethod;
    var oauthMeta = {
      issuer: issuer,
      responseType: responseType,
      state: state,
      nonce: nonce,
      scopes: scopes,
      clientId: clientId,
      urls: urls,
      ignoreSignature: ignoreSignature,
      redirectUri: redirectUri,
      codeVerifier: codeVerifier,
      codeChallenge: codeChallenge,
      codeChallengeMethod: codeChallengeMethod
    };
    sdk.transactionManager.save(oauthMeta, {
      oauth: true
    });

    sdk.token.getWithRedirect._setLocation(requestUrl);
  });
}

function removeHash(sdk) {
  var nativeHistory = sdk.token.parseFromUrl._getHistory();

  var nativeDoc = sdk.token.parseFromUrl._getDocument();

  var nativeLoc = sdk.token.parseFromUrl._getLocation();

  if (nativeHistory && nativeHistory.replaceState) {
    nativeHistory.replaceState(null, nativeDoc.title, nativeLoc.pathname + nativeLoc.search);
  } else {
    nativeLoc.hash = '';
  }
}

function removeSearch(sdk) {
  var nativeHistory = sdk.token.parseFromUrl._getHistory();

  var nativeDoc = sdk.token.parseFromUrl._getDocument();

  var nativeLoc = sdk.token.parseFromUrl._getLocation();

  if (nativeHistory && nativeHistory.replaceState) {
    nativeHistory.replaceState(null, nativeDoc.title, nativeLoc.pathname + nativeLoc.hash);
  } else {
    nativeLoc.search = '';
  }
}

function getResponseMode(sdk) {
  var defaultResponseMode = sdk.options.pkce ? 'query' : 'fragment';
  var responseMode = sdk.options.responseMode || defaultResponseMode;
  return responseMode;
}
function parseOAuthResponseFromUrl(sdk, options) {
  options = options || {};

  if (isString(options)) {
    options = {
      url: options
    };
  } else {
    options = options;
  }

  var url = options.url;
  var responseMode = options.responseMode || getResponseMode(sdk);

  var nativeLoc = sdk.token.parseFromUrl._getLocation();

  var paramStr;

  if (responseMode === 'query') {
    paramStr = url ? url.substring(url.indexOf('?')) : nativeLoc.search;
  } else {
    paramStr = url ? url.substring(url.indexOf('#')) : nativeLoc.hash;
  }

  if (!paramStr) {
    throw new AuthSdkError('Unable to parse a token from the url');
  }

  return urlParamsToObject(paramStr);
}
function cleanOAuthResponseFromUrl(sdk, options) {
  var responseMode = options.responseMode || getResponseMode(sdk);
  responseMode === 'query' ? removeSearch(sdk) : removeHash(sdk);
}
function parseFromUrl(_x, _x2) {
  return _parseFromUrl.apply(this, arguments);
}

function _parseFromUrl() {
  _parseFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sdk, options) {
    var res, state, oauthParams, urls;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = options || {};

            if (isString(options)) {
              options = {
                url: options
              };
            } else {
              options = options;
            }

            res = parseOAuthResponseFromUrl(sdk, options);
            state = res.state;
            oauthParams = sdk.transactionManager.load({
              oauth: true,
              pkce: sdk.options.pkce,
              state: state
            });

            if (oauthParams) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", Promise.reject(new AuthSdkError('Unable to retrieve OAuth redirect params from storage')));

          case 7:
            urls = oauthParams.urls;
            delete oauthParams.urls;

            if (!options.url) {
              cleanOAuthResponseFromUrl(sdk, options);
            }

            return _context.abrupt("return", handleOAuthResponse(sdk, oauthParams, res, urls).catch(function (err) {
              if (!isInteractionRequiredError(err)) {
                sdk.transactionManager.clear({
                  state: state
                });
              }

              throw err;
            }).then(function (res) {
              sdk.transactionManager.clear({
                state: state
              });
              return res;
            }));

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseFromUrl.apply(this, arguments);
}

var Cookies = require('js-cookie');

var storageUtil = {
  getHttpCache: function getHttpCache() {
    return null;
  },
  getPKCEStorage: function getPKCEStorage() {
    return null;
  },
  browserHasLocalStorage: function browserHasLocalStorage() {
    try {
      var storage = storageUtil.getLocalStorage();
      return storageUtil.testStorage(storage);
    } catch (e) {
      return false;
    }
  },
  browserHasSessionStorage: function browserHasSessionStorage() {
    try {
      var storage = storageUtil.getSessionStorage();
      return storageUtil.testStorage(storage);
    } catch (e) {
      return false;
    }
  },
  testStorageType: function testStorageType(storageType) {
    var supported = false;

    switch (storageType) {
      case 'sessionStorage':
        supported = storageUtil.browserHasSessionStorage();
        break;

      case 'localStorage':
        supported = storageUtil.browserHasLocalStorage();
        break;

      case 'cookie':
      case 'memory':
        supported = true;
        break;

      default:
        supported = false;
        break;
    }

    return supported;
  },
  getStorageByType: function getStorageByType(storageType, options) {
    var storageProvider = null;

    switch (storageType) {
      case 'sessionStorage':
        storageProvider = storageUtil.getSessionStorage();
        break;

      case 'localStorage':
        storageProvider = storageUtil.getLocalStorage();
        break;

      case 'cookie':
        storageProvider = storageUtil.getCookieStorage(options);
        break;

      case 'memory':
        storageProvider = storageUtil.getInMemoryStorage();
        break;

      default:
        throw new AuthSdkError("Unrecognized storage option: ".concat(storageType));
    }

    return storageProvider;
  },
  findStorageType: function findStorageType(types) {
    var curType;
    var nextType;
    types = types.slice();
    curType = types.shift();
    nextType = types.length ? types[0] : null;

    if (!nextType) {
      return curType;
    }

    if (storageUtil.testStorageType(curType)) {
      return curType;
    }

    warn("This browser doesn't support ".concat(curType, ". Switching to ").concat(nextType, "."));
    return storageUtil.findStorageType(types);
  },
  getLocalStorage: function getLocalStorage() {
    return localStorage;
  },
  getSessionStorage: function getSessionStorage() {
    return sessionStorage;
  },
  getCookieStorage: function getCookieStorage(options) {
    var secure = options.secure;
    var sameSite = options.sameSite;
    var sessionCookie = options.sessionCookie;

    if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {
      throw new AuthSdkError('getCookieStorage: "secure" and "sameSite" options must be provided');
    }

    var storage = {
      getItem: storageUtil.storage.get,
      setItem: function setItem(key, value) {
        var expiresAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '2200-01-01T00:00:00.000Z';
        expiresAt = sessionCookie ? null : expiresAt;
        storageUtil.storage.set(key, value, expiresAt, {
          secure: secure,
          sameSite: sameSite
        });
      },
      removeItem: function removeItem(key) {
        storageUtil.storage.delete(key);
      }
    };

    if (!options.useMultipleCookies) {
      return storage;
    }

    return {
      getItem: function getItem(key) {
        var data = storage.getItem();
        var value = {};
        Object.keys(data).forEach(function (k) {
          if (k.indexOf(key) === 0) {
            value[k.replace("".concat(key, "_"), '')] = JSON.parse(data[k]);
          }
        });
        return JSON.stringify(value);
      },
      setItem: function setItem(key, value) {
        var existingValues = JSON.parse(this.getItem(key));
        value = JSON.parse(value);
        Object.keys(value).forEach(function (k) {
          var storageKey = key + '_' + k;
          var valueToStore = JSON.stringify(value[k]);
          storage.setItem(storageKey, valueToStore);
          delete existingValues[k];
        });
        Object.keys(existingValues).forEach(function (k) {
          storage.removeItem(key + '_' + k);
        });
      },
      removeItem: function removeItem(key) {
        var existingValues = JSON.parse(this.getItem(key));
        Object.keys(existingValues).forEach(function (k) {
          storage.removeItem(key + '_' + k);
        });
      }
    };
  },
  inMemoryStore: {},
  getInMemoryStorage: function getInMemoryStorage() {
    var _this = this;

    return {
      getItem: function getItem(key) {
        return _this.inMemoryStore[key];
      },
      setItem: function setItem(key, value) {
        _this.inMemoryStore[key] = value;
      }
    };
  },
  testStorage: function testStorage(storage) {
    var key = 'okta-test-storage';

    try {
      storage.setItem(key, key);
      storage.removeItem(key);
      return true;
    } catch (e) {
      return false;
    }
  },
  storage: {
    set: function set(name, value, expiresAt, options) {
      var sameSite = options.sameSite,
          secure = options.secure;

      if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {
        throw new AuthSdkError('storage.set: "secure" and "sameSite" options must be provided');
      }

      var cookieOptions = {
        path: options.path || '/',
        secure: secure,
        sameSite: sameSite
      };

      if (!!Date.parse(expiresAt)) {
        cookieOptions.expires = new Date(expiresAt);
      }

      Cookies.set(name, value, cookieOptions);
      return storageUtil.storage.get(name);
    },
    get: function get(name) {
      return Cookies.get(name);
    },
    delete: function _delete(name) {
      return Cookies.remove(name, {
        path: '/'
      });
    }
  }
};

function assertValidConfig(args) {
  args = args || {};
  var scopes = args.scopes;

  if (scopes && !Array.isArray(scopes)) {
    throw new AuthSdkError('scopes must be a array of strings. ' + 'Required usage: new OktaAuth({scopes: ["openid", "email"]})');
  }

  var issuer = args.issuer;

  if (!issuer) {
    throw new AuthSdkError('No issuer passed to constructor. ' + 'Required usage: new OktaAuth({issuer: "https://{yourOktaDomain}.com/oauth2/{authServerId}"})');
  }

  var isUrlRegex = new RegExp('^http?s?://.+');

  if (!isUrlRegex.test(args.issuer)) {
    throw new AuthSdkError('Issuer must be a valid URL. ' + 'Required usage: new OktaAuth({issuer: "https://{yourOktaDomain}.com/oauth2/{authServerId}"})');
  }

  if (issuer.indexOf('-admin.') !== -1) {
    throw new AuthSdkError('Issuer URL passed to constructor contains "-admin" in subdomain. ' + 'Required usage: new OktaAuth({issuer: "https://{yourOktaDomain}.com})');
  }
}

function getUserAgent(args, sdkValue) {
  var userAgent = args.userAgent || {};

  if (userAgent.value) {
    return userAgent.value;
  }

  if (userAgent.template) {
    return userAgent.template.replace('$OKTA_AUTH_JS', sdkValue);
  }

  return sdkValue;
}

var SdkClock = /*#__PURE__*/function () {
  function SdkClock(localOffset) {
    _classCallCheck(this, SdkClock);

    this.localOffset = parseInt(localOffset || 0);
  }

  _createClass(SdkClock, [{
    key: "now",
    value: function now() {
      var now = (Date.now() + this.localOffset) / 1000;
      return now;
    }
  }], [{
    key: "create",
    value: function create() {
      var localOffset = 0;
      return new SdkClock(localOffset);
    }
  }]);

  return SdkClock;
}();

function shouldThrottleRenew(renewTimeQueue) {
  var res = false;
  renewTimeQueue.push(Date.now());

  if (renewTimeQueue.length >= 10) {
    var firstTime = renewTimeQueue.shift();
    var lastTime = renewTimeQueue[renewTimeQueue.length - 1];
    res = lastTime - firstTime < 30 * 1000;
  }

  return res;
}

var TokenService = /*#__PURE__*/function () {
  function TokenService(tokenManager) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TokenService);

    this.tokenManager = tokenManager;
    this.options = options;
  }

  _createClass(TokenService, [{
    key: "start",
    value: function start() {
      var _this = this;

      var renewTimeQueue = [];

      this.onTokenExpiredHandler = function (key) {
        if (_this.options.autoRenew) {
          if (shouldThrottleRenew(renewTimeQueue)) {
            var error = new AuthSdkError('Too many token renew requests');

            _this.tokenManager.emitError(error);
          } else {
            _this.tokenManager.renew(key).catch(function () {});
          }
        } else if (_this.options.autoRemove) {
          _this.tokenManager.remove(key);
        }
      };

      this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);
      this.tokenManager.setExpireEventTimeoutAll();

      if (this.options.syncStorage && isBrowser()) {
        this.storageListener = function (_ref) {
          var key = _ref.key,
              newValue = _ref.newValue,
              oldValue = _ref.oldValue;

          var handleCrossTabsStorageChange = function handleCrossTabsStorageChange() {
            _this.tokenManager.resetExpireEventTimeoutAll();

            _this.tokenManager.emitEventsForCrossTabsStorageUpdate(newValue, oldValue);
          };

          if (key && (key !== _this.options.storageKey || newValue === oldValue)) {
            return;
          }

          _this.syncTimeout = setTimeout(function () {
            return handleCrossTabsStorageChange();
          }, _this.options._storageEventDelay);
        };

        window.addEventListener('storage', this.storageListener);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      this.tokenManager.clearExpireEventTimeoutAll();
      this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);

      if (this.options.syncStorage && isBrowser()) {
        window.removeEventListener('storage', this.storageListener);
        clearTimeout(this.syncTimeout);
      }
    }
  }]);

  return TokenService;
}();

var DEFAULT_OPTIONS = {
  autoRenew: true,
  autoRemove: true,
  storage: undefined,
  expireEarlySeconds: 30,
  storageKey: TOKEN_STORAGE_NAME,
  syncStorage: true,
  _storageEventDelay: 0
};
var EVENT_EXPIRED = 'expired';
var EVENT_RENEWED = 'renewed';
var EVENT_ADDED = 'added';
var EVENT_REMOVED = 'removed';
var EVENT_ERROR = 'error';

function defaultState() {
  return {
    expireTimeouts: {},
    renewPromise: null
  };
}

var TokenManager = /*#__PURE__*/function () {
  function TokenManager(sdk) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TokenManager);

    this.sdk = sdk;
    this.emitter = sdk.emitter;

    if (!this.emitter) {
      throw new AuthSdkError('Emitter should be initialized before TokenManager');
    }

    options = Object.assign({}, DEFAULT_OPTIONS, removeNils(options));

    if (isIE11OrLess()) {
      options._storageEventDelay = options._storageEventDelay || 1000;
    }

    if (!isLocalhost()) {
      options.expireEarlySeconds = DEFAULT_OPTIONS.expireEarlySeconds;
    }

    this.options = options;
    var storageOptions = removeNils({
      storageKey: options.storageKey,
      secure: options.secure
    });

    if (_typeof(options.storage) === 'object') {
      storageOptions.storageProvider = options.storage;
    } else if (options.storage) {
      storageOptions.storageType = options.storage;
    }

    this.storage = sdk.storageManager.getTokenStorage(storageOptions);
    this.clock = SdkClock.create();
    this.state = defaultState();
    this.on = this.emitter.on.bind(this.emitter);
    this.off = this.emitter.off.bind(this.emitter);
  }

  _createClass(TokenManager, [{
    key: "start",
    value: function start() {
      if (this.service) {
        this.stop();
      }

      this.service = new TokenService(this, this.getOptions());
      this.service.start();
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.service) {
        this.service.stop();
        this.service = null;
      }
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return clone(this.options);
    }
  }, {
    key: "getExpireTime",
    value: function getExpireTime(token) {
      var expireTime = token.expiresAt - this.options.expireEarlySeconds;
      return expireTime;
    }
  }, {
    key: "hasExpired",
    value: function hasExpired(token) {
      var expireTime = this.getExpireTime(token);
      return expireTime <= this.clock.now();
    }
  }, {
    key: "emitExpired",
    value: function emitExpired(key, token) {
      this.emitter.emit(EVENT_EXPIRED, key, token);
    }
  }, {
    key: "emitRenewed",
    value: function emitRenewed(key, freshToken, oldToken) {
      this.emitter.emit(EVENT_RENEWED, key, freshToken, oldToken);
    }
  }, {
    key: "emitAdded",
    value: function emitAdded(key, token) {
      this.emitter.emit(EVENT_ADDED, key, token);
    }
  }, {
    key: "emitRemoved",
    value: function emitRemoved(key, token) {
      this.emitter.emit(EVENT_REMOVED, key, token);
    }
  }, {
    key: "emitError",
    value: function emitError(error) {
      this.emitter.emit(EVENT_ERROR, error);
    }
  }, {
    key: "emitEventsForCrossTabsStorageUpdate",
    value: function emitEventsForCrossTabsStorageUpdate(newValue, oldValue) {
      var _this = this;

      var oldTokens = this.getTokensFromStorageValue(oldValue);
      var newTokens = this.getTokensFromStorageValue(newValue);
      Object.keys(newTokens).forEach(function (key) {
        var oldToken = oldTokens[key];
        var newToken = newTokens[key];

        if (JSON.stringify(oldToken) !== JSON.stringify(newToken)) {
          _this.emitAdded(key, newToken);
        }
      });
      Object.keys(oldTokens).forEach(function (key) {
        var oldToken = oldTokens[key];
        var newToken = newTokens[key];

        if (!newToken) {
          _this.emitRemoved(key, oldToken);
        }
      });
    }
  }, {
    key: "clearExpireEventTimeout",
    value: function clearExpireEventTimeout(key) {
      clearTimeout(this.state.expireTimeouts[key]);
      delete this.state.expireTimeouts[key];
      this.state.renewPromise = null;
    }
  }, {
    key: "clearExpireEventTimeoutAll",
    value: function clearExpireEventTimeoutAll() {
      var expireTimeouts = this.state.expireTimeouts;

      for (var key in expireTimeouts) {
        if (!Object.prototype.hasOwnProperty.call(expireTimeouts, key)) {
          continue;
        }

        this.clearExpireEventTimeout(key);
      }
    }
  }, {
    key: "setExpireEventTimeout",
    value: function setExpireEventTimeout(key, token) {
      var _this2 = this;

      if (isRefreshToken(token)) {
        return;
      }

      var expireTime = this.getExpireTime(token);
      var expireEventWait = Math.max(expireTime - this.clock.now(), 0) * 1000;
      this.clearExpireEventTimeout(key);
      var expireEventTimeout = setTimeout(function () {
        _this2.emitExpired(key, token);
      }, expireEventWait);
      this.state.expireTimeouts[key] = expireEventTimeout;
    }
  }, {
    key: "setExpireEventTimeoutAll",
    value: function setExpireEventTimeoutAll() {
      var tokenStorage = this.storage.getStorage();

      for (var key in tokenStorage) {
        if (!Object.prototype.hasOwnProperty.call(tokenStorage, key)) {
          continue;
        }

        var token = tokenStorage[key];
        this.setExpireEventTimeout(key, token);
      }
    }
  }, {
    key: "resetExpireEventTimeoutAll",
    value: function resetExpireEventTimeoutAll() {
      this.clearExpireEventTimeoutAll();
      this.setExpireEventTimeoutAll();
    }
  }, {
    key: "add",
    value: function add(key, token) {
      var tokenStorage = this.storage.getStorage();

      validateToken(token);

      tokenStorage[key] = token;
      this.storage.setStorage(tokenStorage);
      this.emitAdded(key, token);
      this.setExpireEventTimeout(key, token);
    }
  }, {
    key: "getSync",
    value: function getSync(key) {
      var tokenStorage = this.storage.getStorage();
      return tokenStorage[key];
    }
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.getSync(key));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }, {
    key: "getTokensSync",
    value: function getTokensSync() {
      var tokens = {};
      var tokenStorage = this.storage.getStorage();
      Object.keys(tokenStorage).forEach(function (key) {
        var token = tokenStorage[key];

        if (isAccessToken(token)) {
          tokens.accessToken = token;
        } else if (isIDToken(token)) {
          tokens.idToken = token;
        } else if (isRefreshToken(token)) {
          tokens.refreshToken = token;
        }
      });
      return tokens;
    }
  }, {
    key: "getTokens",
    value: function () {
      var _getTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.getTokensSync());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getTokens() {
        return _getTokens.apply(this, arguments);
      }

      return getTokens;
    }()
  }, {
    key: "getStorageKeyByType",
    value: function getStorageKeyByType(type) {
      var tokenStorage = this.storage.getStorage();
      var key = Object.keys(tokenStorage).filter(function (key) {
        var token = tokenStorage[key];
        return isAccessToken(token) && type === 'accessToken' || isIDToken(token) && type === 'idToken' || isRefreshToken(token) && type === 'refreshToken';
      })[0];
      return key;
    }
  }, {
    key: "getTokenType",
    value: function getTokenType(token) {
      if (isAccessToken(token)) {
        return 'accessToken';
      }

      if (isIDToken(token)) {
        return 'idToken';
      }

      if (isRefreshToken(token)) {
        return 'refreshToken';
      }

      throw new AuthSdkError('Unknown token type');
    }
  }, {
    key: "setTokens",
    value: function setTokens(tokens, accessTokenCb, idTokenCb, refreshTokenCb) {
      var _this3 = this;

      var handleTokenCallback = function handleTokenCallback(key, token) {
        var type = _this3.getTokenType(token);

        if (type === 'accessToken') {
          accessTokenCb && accessTokenCb(key, token);
        } else if (type === 'idToken') {
          idTokenCb && idTokenCb(key, token);
        } else if (type === 'refreshToken') {
          refreshTokenCb && refreshTokenCb(key, token);
        }
      };

      var handleAdded = function handleAdded(key, token) {
        _this3.emitAdded(key, token);

        _this3.setExpireEventTimeout(key, token);

        handleTokenCallback(key, token);
      };

      var handleRenewed = function handleRenewed(key, token, oldToken) {
        _this3.emitRenewed(key, token, oldToken);

        _this3.clearExpireEventTimeout(key);

        _this3.setExpireEventTimeout(key, token);

        handleTokenCallback(key, token);
      };

      var handleRemoved = function handleRemoved(key, token) {
        _this3.clearExpireEventTimeout(key);

        _this3.emitRemoved(key, token);

        handleTokenCallback(key, token);
      };

      var types = ['idToken', 'accessToken', 'refreshToken'];
      var existingTokens = this.getTokensSync();
      types.forEach(function (type) {
        var token = tokens[type];

        if (token) {
          validateToken(token, type);
        }
      });
      var storage = types.reduce(function (storage, type) {
        var token = tokens[type];

        if (token) {
          var storageKey = _this3.getStorageKeyByType(type) || type;
          storage[storageKey] = token;
        }

        return storage;
      }, {});
      this.storage.setStorage(storage);
      types.forEach(function (type) {
        var newToken = tokens[type];
        var existingToken = existingTokens[type];
        var storageKey = _this3.getStorageKeyByType(type) || type;

        if (newToken && existingToken) {
          handleRemoved(storageKey, existingToken);
          handleAdded(storageKey, newToken);
          handleRenewed(storageKey, newToken, existingToken);
        } else if (newToken) {
          handleAdded(storageKey, newToken);
        } else if (existingToken) {
          handleRemoved(storageKey, existingToken);
        }
      });
    }
  }, {
    key: "remove",
    value: function remove(key) {
      this.clearExpireEventTimeout(key);
      var tokenStorage = this.storage.getStorage();
      var removedToken = tokenStorage[key];
      delete tokenStorage[key];
      this.storage.setStorage(tokenStorage);
      this.emitRemoved(key, removedToken);
    }
  }, {
    key: "renewToken",
    value: function () {
      var _renewToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.sdk.token.renew(token));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function renewToken(_x2) {
        return _renewToken.apply(this, arguments);
      }

      return renewToken;
    }()
  }, {
    key: "validateToken",
    value: function validateToken$1(token) {
      return validateToken(token);
    }
  }, {
    key: "renew",
    value: function renew(key) {
      var _this4 = this;

      if (this.state.renewPromise) {
        return this.state.renewPromise;
      }

      try {
        var token = this.getSync(key);

        if (!token) {
          throw new AuthSdkError('The tokenManager has no token for the key: ' + key);
        }
      } catch (e) {
        return Promise.reject(e);
      }

      this.clearExpireEventTimeout(key);
      this.state.renewPromise = this.sdk.token.renewTokens().then(function (tokens) {
        _this4.setTokens(tokens);

        var tokenType = _this4.getTokenType(token);

        return tokens[tokenType];
      }).catch(function (err) {
        if (isRefreshTokenError(err) || err.name === 'OAuthError' || err.name === 'AuthSdkError') {
          _this4.remove(key);

          err.tokenKey = key;

          _this4.emitError(err);
        }

        throw err;
      }).finally(function () {
        _this4.state.renewPromise = null;
      });
      return this.state.renewPromise;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.clearExpireEventTimeoutAll();
      this.storage.clearStorage();
    }
  }, {
    key: "getTokensFromStorageValue",
    value: function getTokensFromStorageValue(value) {
      var tokens;

      try {
        tokens = JSON.parse(value) || {};
      } catch (e) {
        tokens = {};
      }

      return tokens;
    }
  }, {
    key: "updateRefreshToken",
    value: function updateRefreshToken(token) {
      var key = this.getStorageKeyByType('refreshToken') || REFRESH_TOKEN_STORAGE_KEY;
      var tokenStorage = this.storage.getStorage();

      validateToken(token);

      tokenStorage[key] = token;
      this.storage.setStorage(tokenStorage);
    }
  }]);

  return TokenManager;
}();

var PromiseQueue = /*#__PURE__*/function () {
  function PromiseQueue() {
    _classCallCheck(this, PromiseQueue);

    this.queue = [];
    this.running = false;
  }

  _createClass(PromiseQueue, [{
    key: "push",
    value: function push(method, thisObject) {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        _this.queue.push({
          method: method,
          thisObject: thisObject,
          args: args,
          resolve: resolve,
          reject: reject
        });

        _this.run();
      });
    }
  }, {
    key: "run",
    value: function run() {
      var _this2 = this;

      if (this.running) {
        return;
      }

      if (this.queue.length === 0) {
        return;
      }

      this.running = true;
      var queueItem = this.queue.shift();
      var res = queueItem.method.apply(queueItem.thisObject, queueItem.args);

      if (isPromise(res)) {
        res.then(queueItem.resolve, queueItem.reject).finally(function () {
          _this2.running = false;

          _this2.run();
        });
      } else {
        queueItem.resolve(res);
        this.running = false;
        this.run();
      }
    }
  }]);

  return PromiseQueue;
}();

function fingerprint(sdk, options) {
  options = options || {};

  if (!isFingerprintSupported()) {
    return Promise.reject(new AuthSdkError('Fingerprinting is not supported on this device'));
  }

  var timeout;
  var iframe;
  var listener;
  var promise = new Promise(function (resolve, reject) {
    iframe = document.createElement('iframe');
    iframe.style.display = 'none';

    listener = function listener(e) {
      if (!e || !e.data || e.origin !== sdk.getIssuerOrigin()) {
        return;
      }

      try {
        var msg = JSON.parse(e.data);
      } catch (err) {
        return;
      }

      if (!msg) {
        return;
      }

      if (msg.type === 'FingerprintAvailable') {
        return resolve(msg.fingerprint);
      }

      if (msg.type === 'FingerprintServiceReady') {
        e.source.postMessage(JSON.stringify({
          type: 'GetFingerprint'
        }), e.origin);
      }
    };

    addListener(window, 'message', listener);
    iframe.src = sdk.getIssuerOrigin() + '/auth/services/devicefingerprint';
    document.body.appendChild(iframe);
    timeout = setTimeout(function () {
      reject(new AuthSdkError('Fingerprinting timed out'));
    }, options.timeout || 15000);
  });
  return promise.finally(function () {
    clearTimeout(timeout);
    removeListener(window, 'message', listener);

    if (document.body.contains(iframe)) {
      iframe.parentElement.removeChild(iframe);
    }
  });
}

var PCancelable = require('p-cancelable');

var INITIAL_AUTH_STATE = null;
var DEFAULT_PENDING = {
  updateAuthStatePromise: null,
  canceledTimes: 0
};
var EVENT_AUTH_STATE_CHANGE = 'authStateChange';
var MAX_PROMISE_CANCEL_TIMES = 10;

var isSameAuthState = function isSameAuthState(prevState, state) {
  if (!prevState) {
    return false;
  }

  return prevState.isAuthenticated === state.isAuthenticated && JSON.stringify(prevState.idToken) === JSON.stringify(state.idToken) && JSON.stringify(prevState.accessToken) === JSON.stringify(state.accessToken) && prevState.error === state.error;
};

var AuthStateManager = /*#__PURE__*/function () {
  function AuthStateManager(sdk) {
    var _this = this;

    _classCallCheck(this, AuthStateManager);

    if (!sdk.emitter) {
      throw new AuthSdkError('Emitter should be initialized before AuthStateManager');
    }

    this._sdk = sdk;
    this._pending = Object.assign({}, DEFAULT_PENDING);
    this._authState = INITIAL_AUTH_STATE;
    this._logOptions = {};
    sdk.tokenManager.on(EVENT_ADDED, function (key, token) {
      _this._setLogOptions({
        event: EVENT_ADDED,
        key: key,
        token: token
      });

      _this.updateAuthState();
    });
    sdk.tokenManager.on(EVENT_REMOVED, function (key, token) {
      _this._setLogOptions({
        event: EVENT_REMOVED,
        key: key,
        token: token
      });

      _this.updateAuthState();
    });
  }

  _createClass(AuthStateManager, [{
    key: "_setLogOptions",
    value: function _setLogOptions(options) {
      this._logOptions = options;
    }
  }, {
    key: "getAuthState",
    value: function getAuthState() {
      return this._authState;
    }
  }, {
    key: "getPreviousAuthState",
    value: function getPreviousAuthState() {
      return this._prevAuthState;
    }
  }, {
    key: "updateAuthState",
    value: function () {
      var _updateAuthState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var _this$_sdk$options, transformAuthState, devMode, log, emitAuthStateChange, finalPromise, cancelablePromise;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$_sdk$options = this._sdk.options, transformAuthState = _this$_sdk$options.transformAuthState, devMode = _this$_sdk$options.devMode;

                log = function log(status) {
                  var _this2$_logOptions = _this2._logOptions,
                      event = _this2$_logOptions.event,
                      key = _this2$_logOptions.key,
                      token = _this2$_logOptions.token;
                  getConsole().group("OKTA-AUTH-JS:updateAuthState: Event:".concat(event, " Status:").concat(status));
                  getConsole().log(key, token);
                  getConsole().log('Current authState', _this2._authState);
                  getConsole().groupEnd();
                  _this2._logOptions = {};
                };

                emitAuthStateChange = function emitAuthStateChange(authState) {
                  if (isSameAuthState(_this2._authState, authState)) {
                    devMode && log('unchanged');
                    return;
                  }

                  _this2._prevAuthState = _this2._authState;
                  _this2._authState = authState;

                  _this2._sdk.emitter.emit(EVENT_AUTH_STATE_CHANGE, Object.assign({}, authState));

                  devMode && log('emitted');
                };

                finalPromise = function finalPromise(origPromise) {
                  return _this2._pending.updateAuthStatePromise.then(function () {
                    var curPromise = _this2._pending.updateAuthStatePromise;

                    if (curPromise && curPromise !== origPromise) {
                      return finalPromise(curPromise);
                    }

                    return _this2.getAuthState();
                  });
                };

                if (!this._pending.updateAuthStatePromise) {
                  _context.next = 11;
                  break;
                }

                if (!(this._pending.canceledTimes >= MAX_PROMISE_CANCEL_TIMES)) {
                  _context.next = 10;
                  break;
                }

                devMode && log('terminated');
                return _context.abrupt("return", finalPromise(this._pending.updateAuthStatePromise));

              case 10:
                this._pending.updateAuthStatePromise.cancel();

              case 11:
                cancelablePromise = new PCancelable(function (resolve, _, onCancel) {
                  onCancel.shouldReject = false;
                  onCancel(function () {
                    _this2._pending.updateAuthStatePromise = null;
                    _this2._pending.canceledTimes = _this2._pending.canceledTimes + 1;
                    devMode && log('canceled');
                  });

                  var emitAndResolve = function emitAndResolve(authState) {
                    if (cancelablePromise.isCanceled) {
                      resolve();
                      return;
                    }

                    emitAuthStateChange(authState);
                    resolve();
                    _this2._pending = Object.assign({}, DEFAULT_PENDING);
                  };

                  _this2._sdk.isAuthenticated().then(function () {
                    if (cancelablePromise.isCanceled) {
                      resolve();
                      return;
                    }

                    var _this2$_sdk$tokenMana = _this2._sdk.tokenManager.getTokensSync(),
                        accessToken = _this2$_sdk$tokenMana.accessToken,
                        idToken = _this2$_sdk$tokenMana.idToken,
                        refreshToken = _this2$_sdk$tokenMana.refreshToken;

                    var authState = {
                      accessToken: accessToken,
                      idToken: idToken,
                      refreshToken: refreshToken,
                      isAuthenticated: !!(accessToken && idToken)
                    };
                    var promise = transformAuthState ? transformAuthState(_this2._sdk, authState) : Promise.resolve(authState);
                    promise.then(function (authState) {
                      return emitAndResolve(authState);
                    }).catch(function (error) {
                      return emitAndResolve({
                        accessToken: accessToken,
                        idToken: idToken,
                        refreshToken: refreshToken,
                        isAuthenticated: false,
                        error: error
                      });
                    });
                  });
                });
                this._pending.updateAuthStatePromise = cancelablePromise;
                return _context.abrupt("return", finalPromise(cancelablePromise));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function updateAuthState() {
        return _updateAuthState.apply(this, arguments);
      }

      return updateAuthState;
    }()
  }, {
    key: "subscribe",
    value: function subscribe(handler) {
      this._sdk.emitter.on(EVENT_AUTH_STATE_CHANGE, handler);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(handler) {
      this._sdk.emitter.off(EVENT_AUTH_STATE_CHANGE, handler);
    }
  }]);

  return AuthStateManager;
}();

var SavedObject = /*#__PURE__*/function () {
  function SavedObject(storage, storageName) {
    _classCallCheck(this, SavedObject);

    if (!storage) {
      throw new AuthSdkError('"storage" is required');
    }

    if (typeof storageName !== 'string' || !storageName.length) {
      throw new AuthSdkError('"storageName" is required');
    }

    this.storageName = storageName;
    this.storageProvider = storage;
  }

  _createClass(SavedObject, [{
    key: "getItem",
    value: function getItem(key) {
      return this.getStorage()[key];
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      return this.updateStorage(key, value);
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      return this.clearStorage(key);
    }
  }, {
    key: "getStorage",
    value: function getStorage() {
      var storageString = this.storageProvider.getItem(this.storageName);
      storageString = storageString || '{}';

      try {
        return JSON.parse(storageString);
      } catch (e) {
        throw new AuthSdkError('Unable to parse storage string: ' + this.storageName);
      }
    }
  }, {
    key: "setStorage",
    value: function setStorage(obj) {
      try {
        var storageString = obj ? JSON.stringify(obj) : '{}';
        this.storageProvider.setItem(this.storageName, storageString);
      } catch (e) {
        throw new AuthSdkError('Unable to set storage: ' + this.storageName);
      }
    }
  }, {
    key: "clearStorage",
    value: function clearStorage(key) {
      if (!key) {
        if (this.storageProvider.removeItem) {
          this.storageProvider.removeItem(this.storageName);
        } else {
          this.setStorage();
        }

        return;
      }

      var obj = this.getStorage();
      delete obj[key];
      this.setStorage(obj);
    }
  }, {
    key: "updateStorage",
    value: function updateStorage(key, value) {
      var obj = this.getStorage();
      obj[key] = value;
      this.setStorage(obj);
    }
  }]);

  return SavedObject;
}();

function logServerSideMemoryStorageWarning(options) {
  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {
    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');
  }
}

var StorageManager = /*#__PURE__*/function () {
  function StorageManager(storageManagerOptions, cookieOptions, storageUtil) {
    _classCallCheck(this, StorageManager);

    this.storageManagerOptions = storageManagerOptions;
    this.cookieOptions = cookieOptions;
    this.storageUtil = storageUtil;
  }

  _createClass(StorageManager, [{
    key: "getOptionsForSection",
    value: function getOptionsForSection(sectionName, overrideOptions) {
      return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);
    }
  }, {
    key: "getStorage",
    value: function getStorage(options) {
      options = Object.assign({}, this.cookieOptions, options);

      if (options.storageProvider) {
        return options.storageProvider;
      }

      var _options = options,
          storageType = _options.storageType,
          storageTypes = _options.storageTypes;

      if (storageType === 'sessionStorage') {
        options.sessionCookie = true;
      }

      if (storageType && storageTypes) {
        var idx = storageTypes.indexOf(storageType);

        if (idx >= 0) {
          storageTypes = storageTypes.slice(idx);
          storageType = null;
        }
      }

      if (!storageType) {
        storageType = this.storageUtil.findStorageType(storageTypes);
      }

      return this.storageUtil.getStorageByType(storageType, options);
    }
  }, {
    key: "getTransactionStorage",
    value: function getTransactionStorage(options) {
      options = this.getOptionsForSection('transaction', options);
      logServerSideMemoryStorageWarning(options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;
      return new SavedObject(storage, storageKey);
    }
  }, {
    key: "getSharedTansactionStorage",
    value: function getSharedTansactionStorage(options) {
      options = this.getOptionsForSection('shared-transaction', options);
      logServerSideMemoryStorageWarning(options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;
      return new SavedObject(storage, storageKey);
    }
  }, {
    key: "getOriginalUriStorage",
    value: function getOriginalUriStorage(options) {
      options = this.getOptionsForSection('original-uri', options);
      logServerSideMemoryStorageWarning(options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;
      return new SavedObject(storage, storageKey);
    }
  }, {
    key: "getIdxResponseStorage",
    value: function getIdxResponseStorage(options) {
      var storage;

      if (isBrowser()) {
        try {
          storage = this.storageUtil.getStorageByType('memory', options);
        } catch (e) {
          warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');
        }
      } else {
        var transactionStorage = this.getTransactionStorage(options);

        if (transactionStorage) {
          storage = {
            getItem: function getItem(key) {
              var transaction = transactionStorage.getStorage();

              if (transaction && transaction[key]) {
                return transaction[key];
              }

              return null;
            },
            setItem: function setItem(key, val) {
              var transaction = transactionStorage.getStorage();

              if (!transaction) {
                throw new AuthSdkError('Transaction has been cleared, failed to save idxState');
              }

              transaction[key] = val;
              transactionStorage.setStorage(transaction);
            },
            removeItem: function removeItem(key) {
              var transaction = transactionStorage.getStorage();

              if (!transaction) {
                return;
              }

              delete transaction[key];
              transactionStorage.setStorage(transaction);
            }
          };
        }
      }

      if (!storage) {
        return null;
      }

      return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);
    }
  }, {
    key: "getTokenStorage",
    value: function getTokenStorage(options) {
      options = this.getOptionsForSection('token', options);
      logServerSideMemoryStorageWarning(options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || TOKEN_STORAGE_NAME;
      return new SavedObject(storage, storageKey);
    }
  }, {
    key: "getHttpCache",
    value: function getHttpCache(options) {
      options = this.getOptionsForSection('cache', options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || CACHE_STORAGE_NAME;
      return new SavedObject(storage, storageKey);
    }
  }, {
    key: "getLegacyPKCEStorage",
    value: function getLegacyPKCEStorage(options) {
      options = this.getOptionsForSection('legacy-pkce', options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || PKCE_STORAGE_NAME;
      return new SavedObject(storage, storageKey);
    }
  }, {
    key: "getLegacyOAuthParamsStorage",
    value: function getLegacyOAuthParamsStorage(options) {
      options = this.getOptionsForSection('legacy-oauth-params', options);
      var storage = this.getStorage(options);
      var storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;
      return new SavedObject(storage, storageKey);
    }
  }]);

  return StorageManager;
}();

function isRawIdxResponse(obj) {
  return obj && obj.version;
}
function isIdxResponse(obj) {
  return obj && isRawIdxResponse(obj.rawIdxState);
}

var MAX_ENTRY_LIFETIME = 30 * 60 * 1000;
function pruneSharedStorage(storageManager) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  Object.keys(entries).forEach(function (state) {
    var entry = entries[state];
    var age = Date.now() - entry.dateCreated;

    if (age > MAX_ENTRY_LIFETIME) {
      delete entries[state];
    }
  });
  sharedStorage.setStorage(entries);
}
function saveTransactionToSharedStorage(storageManager, state, meta) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  entries[state] = {
    dateCreated: Date.now(),
    transaction: meta
  };
  sharedStorage.setStorage(entries);
}
function loadTransactionFromSharedStorage(storageManager, state) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  var entry = entries[state];

  if (entry && entry.transaction && isTransactionMeta(entry.transaction)) {
    return entry.transaction;
  }

  return null;
}
function clearTransactionFromSharedStorage(storageManager, state) {
  var sharedStorage = storageManager.getSharedTansactionStorage();
  var entries = sharedStorage.getStorage();
  delete entries[state];
  sharedStorage.setStorage(entries);
}

var TransactionManager = /*#__PURE__*/function () {
  function TransactionManager(options) {
    _classCallCheck(this, TransactionManager);

    this.storageManager = options.storageManager;
    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;
    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;
    this.saveStateCookie = options.saveStateCookie === false ? false : true;
    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;
    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;
    this.options = options;
  }

  _createClass(TransactionManager, [{
    key: "clear",
    value: function clear() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var transactionStorage = this.storageManager.getTransactionStorage();
      var meta = transactionStorage.getStorage();
      transactionStorage.clearStorage();
      this.clearIdxResponse();

      if (this.enableSharedStorage && options.clearSharedStorage) {
        var state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);

        if (state) {
          clearTransactionFromSharedStorage(this.storageManager, state);
        }
      }

      if (!this.legacyWidgetSupport) {
        return;
      }

      if (options.oauth) {
        this.clearLegacyOAuthParams();
      }

      if (options.pkce) {
        this.clearLegacyPKCE();
      }
    }
  }, {
    key: "save",
    value: function save(meta) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var storage = this.storageManager.getTransactionStorage();
      var obj = storage.getStorage();

      if (isTransactionMeta(obj) && !options.muteWarning) {
        warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');
      }

      storage.setStorage(meta);

      if (this.enableSharedStorage && meta.state) {
        saveTransactionToSharedStorage(this.storageManager, meta.state, meta);
      }

      if (!options.oauth) {
        return;
      }

      if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {
        var cookieStorage = this.storageManager.getStorage({
          storageType: 'cookie'
        });

        if (this.saveParamsCookie) {
          var responseType = meta.responseType,
              state = meta.state,
              nonce = meta.nonce,
              scopes = meta.scopes,
              clientId = meta.clientId,
              urls = meta.urls,
              ignoreSignature = meta.ignoreSignature;
          var oauthParams = {
            responseType: responseType,
            state: state,
            nonce: nonce,
            scopes: scopes,
            clientId: clientId,
            urls: urls,
            ignoreSignature: ignoreSignature
          };
          cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);
        }

        if (this.saveNonceCookie && meta.nonce) {
          cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);
        }

        if (this.saveStateCookie && meta.state) {
          cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);
        }
      }
    }
  }, {
    key: "exists",
    value: function exists() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      try {
        var meta = this.load(options);
        return !!meta;
      } catch (_a) {
        return false;
      }
    }
  }, {
    key: "load",
    value: function load() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var meta;

      if (this.enableSharedStorage && options.state) {
        pruneSharedStorage(this.storageManager);
        meta = loadTransactionFromSharedStorage(this.storageManager, options.state);

        if (isTransactionMeta(meta)) {
          return meta;
        }
      }

      var storage = this.storageManager.getTransactionStorage();
      meta = storage.getStorage();

      if (isTransactionMeta(meta)) {
        return meta;
      }

      if (!this.legacyWidgetSupport) {
        return null;
      }

      if (options.oauth) {
        try {
          var oauthParams = this.loadLegacyOAuthParams();
          Object.assign(meta, oauthParams);
        } finally {
          this.clearLegacyOAuthParams();
        }
      }

      if (options.pkce) {
        try {
          var pkceMeta = this.loadLegacyPKCE();
          Object.assign(meta, pkceMeta);
        } finally {
          this.clearLegacyPKCE();
        }
      }

      if (isTransactionMeta(meta)) {
        return meta;
      }

      return null;
    }
  }, {
    key: "clearLegacyPKCE",
    value: function clearLegacyPKCE() {
      var storage;

      if (this.storageManager.storageUtil.testStorageType('localStorage')) {
        storage = this.storageManager.getLegacyPKCEStorage({
          storageType: 'localStorage'
        });
        storage.clearStorage();
      }

      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
        storage = this.storageManager.getLegacyPKCEStorage({
          storageType: 'sessionStorage'
        });
        storage.clearStorage();
      }
    }
  }, {
    key: "loadLegacyPKCE",
    value: function loadLegacyPKCE() {
      var storage;
      var obj;

      if (this.storageManager.storageUtil.testStorageType('localStorage')) {
        storage = this.storageManager.getLegacyPKCEStorage({
          storageType: 'localStorage'
        });
        obj = storage.getStorage();

        if (obj && obj.codeVerifier) {
          return obj;
        }
      }

      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
        storage = this.storageManager.getLegacyPKCEStorage({
          storageType: 'sessionStorage'
        });
        obj = storage.getStorage();

        if (obj && obj.codeVerifier) {
          return obj;
        }
      }

      throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', null);
    }
  }, {
    key: "clearLegacyOAuthParams",
    value: function clearLegacyOAuthParams() {
      var storage;

      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
        storage = this.storageManager.getLegacyOAuthParamsStorage({
          storageType: 'sessionStorage'
        });
        storage.clearStorage();
      }

      if (this.storageManager.storageUtil.testStorageType('cookie')) {
        storage = this.storageManager.getLegacyOAuthParamsStorage({
          storageType: 'cookie'
        });
        storage.clearStorage();
      }
    }
  }, {
    key: "loadLegacyOAuthParams",
    value: function loadLegacyOAuthParams() {
      var storage;
      var oauthParams;

      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {
        storage = this.storageManager.getLegacyOAuthParamsStorage({
          storageType: 'sessionStorage'
        });
        oauthParams = storage.getStorage();
      }

      if (isOAuthTransactionMeta(oauthParams)) {
        return oauthParams;
      }

      if (this.storageManager.storageUtil.testStorageType('cookie')) {
        storage = this.storageManager.getLegacyOAuthParamsStorage({
          storageType: 'cookie'
        });
        oauthParams = storage.getStorage();
      }

      if (isOAuthTransactionMeta(oauthParams)) {
        return oauthParams;
      }

      throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');
    }
  }, {
    key: "saveIdxResponse",
    value: function saveIdxResponse(idxResponse) {
      var storage = this.storageManager.getIdxResponseStorage();

      if (!storage) {
        return;
      }

      storage.setStorage(idxResponse);
    }
  }, {
    key: "loadIdxResponse",
    value: function loadIdxResponse() {
      var storage = this.storageManager.getIdxResponseStorage();

      if (!storage) {
        return null;
      }

      var idxResponse = storage.getStorage();

      if (!isRawIdxResponse(idxResponse)) {
        return null;
      }

      return idxResponse;
    }
  }, {
    key: "clearIdxResponse",
    value: function clearIdxResponse() {
      var storage = this.storageManager.getIdxResponseStorage();
      storage === null || storage === void 0 ? void 0 : storage.clearStorage();
    }
  }]);

  return TransactionManager;
}();

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function readData(response) {
  if (response.headers.get('Content-Type') && response.headers.get('Content-Type').toLowerCase().indexOf('application/json') >= 0) {
    return response.json().catch(function (e) {
      return {
        error: e,
        errorSummary: 'Could not parse server response'
      };
    });
  } else {
    return response.text();
  }
}

function formatResult(status, data, response) {
  var isObject = _typeof(data) === 'object';
  var headers = {};

  var _iterator = _createForOfIteratorHelper$3(response.headers.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var pair = _step.value;
      headers[pair[0]] = pair[1];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var result = {
    responseText: isObject ? JSON.stringify(data) : data,
    status: status,
    headers: headers
  };

  if (isObject) {
    result.responseType = 'json';
    result.responseJSON = data;
  }

  return result;
}

function fetchRequest(method, url, args) {
  var body = args.data;
  var headers = args.headers || {};
  var contentType = headers['Content-Type'] || headers['content-type'] || '';

  if (contentType === 'application/json' && body && typeof body !== 'string') {
    body = JSON.stringify(body);
  }

  var fetch = window.fetch || crossFetch;
  var fetchPromise = fetch(url, {
    method: method,
    headers: args.headers,
    body: body,
    credentials: args.withCredentials ? 'include' : 'omit'
  });

  if (!fetchPromise.finally) {
    fetchPromise = Promise.resolve(fetchPromise);
  }

  return fetchPromise.then(function (response) {
    var error = !response.ok;
    var status = response.status;
    return readData(response).then(function (data) {
      return formatResult(status, data, response);
    }).then(function (result) {
      var _a;

      if (error || ((_a = result.responseJSON) === null || _a === void 0 ? void 0 : _a.error)) {
        throw result;
      }

      return result;
    });
  });
}

var NodeCache = require('node-cache');

var sharedStorage = typeof NodeCache === 'function' ? new NodeCache() : null;

var ServerCookies = /*#__PURE__*/function () {
  function ServerCookies(nodeCache) {
    _classCallCheck(this, ServerCookies);

    this.nodeCache = nodeCache;
  }

  _createClass(ServerCookies, [{
    key: "set",
    value: function set(name, value, expiresAt) {
      if (!!Date.parse(expiresAt)) {
        var ttl = (Date.parse(expiresAt) - Date.now()) / 1000;
        this.nodeCache.set(name, value, ttl);
      } else {
        this.nodeCache.set(name, value);
      }

      return this.get(name);
    }
  }, {
    key: "get",
    value: function get(name) {
      return this.nodeCache.get(name);
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      return this.nodeCache.del(name);
    }
  }]);

  return ServerCookies;
}();

var ServerStorage = /*#__PURE__*/function () {
  function ServerStorage(nodeCache) {
    _classCallCheck(this, ServerStorage);

    this.nodeCache = nodeCache;
    this.storage = new ServerCookies(nodeCache);
  }

  _createClass(ServerStorage, [{
    key: "testStorageType",
    value: function testStorageType(storageType) {
      var supported = false;

      switch (storageType) {
        case 'memory':
          supported = true;
          break;
      }

      return supported;
    }
  }, {
    key: "getStorageByType",
    value: function getStorageByType(storageType) {
      var storageProvider = null;

      switch (storageType) {
        case 'memory':
          storageProvider = this.getStorage();
          break;

        default:
          throw new AuthSdkError("Unrecognized storage option: ".concat(storageType));
      }

      return storageProvider;
    }
  }, {
    key: "findStorageType",
    value: function findStorageType() {
      return 'memory';
    }
  }, {
    key: "getHttpCache",
    value: function getHttpCache() {
      return null;
    }
  }, {
    key: "getStorage",
    value: function getStorage() {
      var _this = this;

      return {
        getItem: this.nodeCache.get,
        setItem: function setItem(key, value) {
          _this.nodeCache.set(key, value, '2200-01-01T00:00:00.000Z');
        }
      };
    }
  }]);

  return ServerStorage;
}();

var serverStorage = new ServerStorage(sharedStorage);

var BROWSER_STORAGE = {
  token: {
    storageTypes: ['localStorage', 'sessionStorage', 'cookie'],
    useMultipleCookies: true
  },
  cache: {
    storageTypes: ['localStorage', 'sessionStorage', 'cookie']
  },
  transaction: {
    storageTypes: ['sessionStorage', 'localStorage', 'cookie']
  },
  'shared-transaction': {
    storageTypes: ['localStorage']
  },
  'original-uri': {
    storageTypes: ['localStorage']
  }
};
var SERVER_STORAGE = {
  token: {
    storageTypes: ['memory']
  },
  cache: {
    storageTypes: ['memory']
  },
  transaction: {
    storageTypes: ['memory']
  }
};

function getCookieSettings() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var isHTTPS = arguments.length > 1 ? arguments[1] : undefined;
  var cookieSettings = args.cookies || {};

  if (typeof cookieSettings.secure === 'undefined') {
    cookieSettings.secure = isHTTPS;
  }

  if (typeof cookieSettings.sameSite === 'undefined') {
    cookieSettings.sameSite = cookieSettings.secure ? 'none' : 'lax';
  }

  if (cookieSettings.secure && !isHTTPS) {
    warn('The current page is not being served with the HTTPS protocol.\n' + 'For security reasons, we strongly recommend using HTTPS.\n' + 'If you cannot use HTTPS, set "cookies.secure" option to false.');
    cookieSettings.secure = false;
  }

  if (cookieSettings.sameSite === 'none' && !cookieSettings.secure) {
    cookieSettings.sameSite = 'lax';
  }

  return cookieSettings;
}

function getDefaultOptions() {
  var storageUtil$1 = isBrowser() ? storageUtil : serverStorage;
  var storageManager = isBrowser() ? BROWSER_STORAGE : SERVER_STORAGE;
  var enableSharedStorage = isBrowser() ? true : false;
  return {
    devMode: false,
    httpRequestClient: fetchRequest,
    storageUtil: storageUtil$1,
    storageManager: storageManager,
    transactionManager: {
      enableSharedStorage: enableSharedStorage
    }
  };
}

function mergeOptions(options, args) {
  return Object.assign({}, options, removeNils(args), {
    storageManager: Object.assign({}, options.storageManager, args.storageManager),
    transactionManager: Object.assign({}, options.transactionManager, args.transactionManager)
  });
}

function buildOptions() {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  assertValidConfig(args);
  args = mergeOptions(getDefaultOptions(), args);
  return removeNils({
    issuer: removeTrailingSlash(args.issuer),
    tokenUrl: removeTrailingSlash(args.tokenUrl),
    authorizeUrl: removeTrailingSlash(args.authorizeUrl),
    userinfoUrl: removeTrailingSlash(args.userinfoUrl),
    revokeUrl: removeTrailingSlash(args.revokeUrl),
    logoutUrl: removeTrailingSlash(args.logoutUrl),
    clientId: args.clientId,
    redirectUri: args.redirectUri,
    state: args.state,
    scopes: args.scopes,
    postLogoutRedirectUri: args.postLogoutRedirectUri,
    responseMode: args.responseMode,
    responseType: args.responseType,
    pkce: args.pkce === false ? false : true,
    useInteractionCodeFlow: args.useInteractionCodeFlow,
    httpRequestClient: args.httpRequestClient,
    transformErrorXHR: args.transformErrorXHR,
    transformAuthState: args.transformAuthState,
    restoreOriginalUri: args.restoreOriginalUri,
    storageUtil: args.storageUtil,
    headers: args.headers,
    devMode: !!args.devMode,
    storageManager: args.storageManager,
    transactionManager: args.transactionManager,
    cookies: isBrowser() ? getCookieSettings(args, isHTTPS()) : args.cookies,
    ignoreSignature: !!args.ignoreSignature,
    clientSecret: args.clientSecret
  });
}

function createTransactionMeta(_x, _x2) {
  return _createTransactionMeta.apply(this, arguments);
}

function _createTransactionMeta() {
  _createTransactionMeta = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, options) {
    var tokenParams, pkce, clientId, redirectUri, responseType, responseMode, scopes, state, nonce, ignoreSignature, codeVerifier, codeChallengeMethod, codeChallenge, urls, flow, issuer, meta;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return authClient.token.prepareTokenParams(options);

          case 2:
            tokenParams = _context.sent;
            pkce = tokenParams.pkce, clientId = tokenParams.clientId, redirectUri = tokenParams.redirectUri, responseType = tokenParams.responseType, responseMode = tokenParams.responseMode, scopes = tokenParams.scopes, state = tokenParams.state, nonce = tokenParams.nonce, ignoreSignature = tokenParams.ignoreSignature, codeVerifier = tokenParams.codeVerifier, codeChallengeMethod = tokenParams.codeChallengeMethod, codeChallenge = tokenParams.codeChallenge;
            urls = getOAuthUrls(authClient, tokenParams);
            flow = authClient.idx.getFlow() || 'default';
            issuer = authClient.options.issuer;
            meta = {
              flow: flow,
              issuer: issuer,
              pkce: pkce,
              clientId: clientId,
              redirectUri: redirectUri,
              responseType: responseType,
              responseMode: responseMode,
              scopes: scopes,
              state: state,
              nonce: nonce,
              urls: urls,
              ignoreSignature: ignoreSignature,
              codeVerifier: codeVerifier,
              codeChallengeMethod: codeChallengeMethod,
              codeChallenge: codeChallenge
            };
            return _context.abrupt("return", meta);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createTransactionMeta.apply(this, arguments);
}

function transactionMetaExist(authClient, options) {
  if (authClient.transactionManager.exists(options)) {
    var existing = authClient.transactionManager.load(options);

    if (isTransactionMetaValid(authClient, existing) && existing.interactionHandle) {
      return true;
    }
  }

  return false;
}
function getSavedTransactionMeta(authClient, options) {
  var state = (options === null || options === void 0 ? void 0 : options.state) || authClient.options.state;
  var existing = authClient.transactionManager.load({
    state: state
  });

  if (existing && isTransactionMetaValid(authClient, existing)) {
    return existing;
  }
}
function getTransactionMeta(_x3, _x4) {
  return _getTransactionMeta.apply(this, arguments);
}

function _getTransactionMeta() {
  _getTransactionMeta = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(authClient, options) {
    var validExistingMeta;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!authClient.transactionManager.exists(options)) {
              _context2.next = 5;
              break;
            }

            validExistingMeta = getSavedTransactionMeta(authClient, options);

            if (!validExistingMeta) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", validExistingMeta);

          case 4:
            warn('Saved transaction meta does not match the current configuration. ' + 'This may indicate that two apps are sharing a storage key.');

          case 5:
            return _context2.abrupt("return", createTransactionMeta(authClient, options));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getTransactionMeta.apply(this, arguments);
}

function saveTransactionMeta(authClient, meta) {
  authClient.transactionManager.save(meta, {
    muteWarning: true
  });
}
function isTransactionMetaValid(authClient, meta) {
  var keys = ['issuer', 'clientId', 'redirectUri'];

  if (keys.some(function (key) {
    return authClient.options[key] !== meta[key];
  })) {
    return false;
  }

  var _authClient$options = authClient.options,
      flow = _authClient$options.flow,
      state = _authClient$options.state;

  if (state && state !== meta.state) {
    return false;
  }

  var shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';

  if (shouldValidateFlow) {
    if (flow !== meta.flow) {
      return false;
    }
  }

  return true;
}

function getResponse(meta) {
  return {
    meta: meta,
    interactionHandle: meta.interactionHandle,
    state: meta.state
  };
}

function interact(_x) {
  return _interact.apply(this, arguments);
}

function _interact() {
  _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient) {
    var options,
        state,
        meta,
        codeChallenge,
        codeChallengeMethod,
        _authClient$options,
        clientId,
        redirectUri,
        scopes,
        baseUrl,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            state = options.state || authClient.options.state;
            _context.next = 4;
            return getTransactionMeta(authClient, {
              state: state
            });

          case 4:
            meta = _context.sent;

            if (!meta.interactionHandle) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", getResponse(meta));

          case 7:
            codeChallenge = meta.codeChallenge, codeChallengeMethod = meta.codeChallengeMethod;
            _authClient$options = authClient.options, clientId = _authClient$options.clientId, redirectUri = _authClient$options.redirectUri;
            state = state || meta.state;
            scopes = options.scopes || authClient.options.scopes || meta.scopes;
            baseUrl = getOAuthBaseUrl(authClient);
            return _context.abrupt("return", idx.interact({
              clientId: clientId,
              baseUrl: baseUrl,
              scopes: scopes,
              state: state,
              redirectUri: redirectUri,
              codeChallenge: codeChallenge,
              codeChallengeMethod: codeChallengeMethod
            }).then(function (interactionHandle) {
              var newMeta = Object.assign(Object.assign({}, meta), {
                interactionHandle: interactionHandle,
                state: state,
                scopes: scopes
              });
              saveTransactionMeta(authClient, newMeta);
              return getResponse(newMeta);
            }));

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _interact.apply(this, arguments);
}

function introspect(_x, _x2) {
  return _introspect.apply(this, arguments);
}

function _introspect() {
  _introspect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, options) {
    var useLastResponse, rawIdxResponse, version, domain;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            useLastResponse = !options.stateTokenExternalId;

            if (useLastResponse) {
              rawIdxResponse = authClient.transactionManager.loadIdxResponse();
            }

            if (rawIdxResponse) {
              _context.next = 18;
              break;
            }

            version = IDX_API_VERSION;
            domain = getOAuthDomain(authClient);
            _context.prev = 5;
            _context.next = 8;
            return idx.introspect(Object.assign({
              domain: domain,
              version: version
            }, options));

          case 8:
            rawIdxResponse = _context.sent;
            _context.next = 18;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](5);

            if (!isRawIdxResponse(_context.t0)) {
              _context.next = 17;
              break;
            }

            rawIdxResponse = _context.t0;
            _context.next = 18;
            break;

          case 17:
            throw _context.t0;

          case 18:
            return _context.abrupt("return", idx.makeIdxState(rawIdxResponse));

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 11]]);
  }));
  return _introspect.apply(this, arguments);
}

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function getRemediator(idxRemediations, values, options) {
  var remediators = options.remediators,
      flowMonitor = options.flowMonitor;
  var remediator;
  var remediatorCandidates = [];

  var _iterator = _createForOfIteratorHelper$2(idxRemediations),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var remediation = _step.value;
      var isRemeditionInFlow = Object.keys(remediators).includes(remediation.name);

      if (!isRemeditionInFlow) {
        continue;
      }

      var T = remediators[remediation.name];
      remediator = new T(remediation, values);

      if (flowMonitor.isRemediatorCandidate(remediator, idxRemediations, values)) {
        if (remediator.canRemediate()) {
          return remediator;
        }

        remediatorCandidates.push(remediator);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return remediatorCandidates[0];
}

function isTerminalResponse(idxResponse) {
  var neededToProceed = idxResponse.neededToProceed,
      interactionCode = idxResponse.interactionCode;
  return !neededToProceed.length && !interactionCode;
}

function canSkipFn(idxResponse) {
  return idxResponse.neededToProceed.some(function (_ref) {
    var name = _ref.name;
    return name === 'skip';
  });
}

function canResendFn(idxResponse) {
  return Object.keys(idxResponse.actions).some(function (actionName) {
    return actionName.includes('resend');
  });
}

function getIdxMessages(idxResponse, remediators) {
  var _a;

  var messages = [];

  if (!remediators) {
    return messages;
  }

  var rawIdxState = idxResponse.rawIdxState,
      neededToProceed = idxResponse.neededToProceed;
  var globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(function (message) {
    return message;
  });

  if (globalMessages) {
    messages = [].concat(_toConsumableArray(messages), _toConsumableArray(globalMessages));
  }

  var _iterator2 = _createForOfIteratorHelper$2(neededToProceed),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var remediation = _step2.value;
      var T = remediators[remediation.name];

      if (!T) {
        continue;
      }

      var remediator = new T(remediation);
      var fieldMessages = remediator.getMessages();

      if (fieldMessages) {
        messages = [].concat(_toConsumableArray(messages), _toConsumableArray(fieldMessages));
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return messages;
}

function getNextStep(remediator, idxResponse) {
  var nextStep = remediator.getNextStep();
  var canSkip = canSkipFn(idxResponse);
  var canResend = canResendFn(idxResponse);
  return Object.assign(Object.assign(Object.assign({}, nextStep), canSkip && {
    canSkip: canSkip
  }), canResend && {
    canResend: canResend
  });
}

function handleIdxError(e, remediators, remediator) {
  var idxState = isIdxResponse(e) ? e : null;

  if (!idxState) {
    throw e;
  }

  var terminal = isTerminalResponse(idxState);
  var messages = getIdxMessages(idxState, remediators);

  if (terminal) {
    return {
      terminal: terminal,
      messages: messages
    };
  } else {
    var nextStep = remediator && getNextStep(remediator, idxState);
    return Object.assign({
      messages: messages
    }, nextStep && {
      nextStep: nextStep
    });
  }
}

function getActionFromValues(values, idxResponse) {
  return Object.keys(idxResponse.actions).find(function (action) {
    return !!values.resend && action.includes('-resend');
  });
}

function removeActionFromValues(values) {
  values.resend = undefined;
  return values;
}

function remediate(_x, _x2, _x3) {
  return _remediate.apply(this, arguments);
}

function _remediate() {
  _remediate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(idxResponse, values, options) {
    var _idxResponse, neededToProceed, interactionCode, remediators, flowMonitor, terminal, messages, actionFromValues, actions, _iterator3, _step3, action, valuesWithoutExecutedAction, remediator, nextStep, name, data, _terminal, _messages, _nextStep;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _idxResponse = idxResponse, neededToProceed = _idxResponse.neededToProceed, interactionCode = _idxResponse.interactionCode;
            remediators = options.remediators, flowMonitor = options.flowMonitor;

            if (!interactionCode) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", {
              idxResponse: idxResponse
            });

          case 4:
            terminal = isTerminalResponse(idxResponse);
            messages = getIdxMessages(idxResponse, remediators);

            if (!terminal) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", {
              terminal: terminal,
              messages: messages
            });

          case 8:
            actionFromValues = getActionFromValues(values, idxResponse);
            actions = [].concat(_toConsumableArray(options.actions || []), _toConsumableArray(actionFromValues && [actionFromValues] || []));

            if (!actions) {
              _context.next = 40;
              break;
            }

            _iterator3 = _createForOfIteratorHelper$2(actions);
            _context.prev = 12;

            _iterator3.s();

          case 14:
            if ((_step3 = _iterator3.n()).done) {
              _context.next = 32;
              break;
            }

            action = _step3.value;
            valuesWithoutExecutedAction = removeActionFromValues(values);

            if (!(typeof idxResponse.actions[action] === 'function')) {
              _context.next = 30;
              break;
            }

            _context.prev = 18;
            _context.next = 21;
            return idxResponse.actions[action]();

          case 21:
            idxResponse = _context.sent;
            _context.next = 27;
            break;

          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](18);
            return _context.abrupt("return", handleIdxError(_context.t0, remediators));

          case 27:
            if (!(action === 'cancel')) {
              _context.next = 29;
              break;
            }

            return _context.abrupt("return", {
              canceled: true
            });

          case 29:
            return _context.abrupt("return", remediate(idxResponse, valuesWithoutExecutedAction, options));

          case 30:
            _context.next = 14;
            break;

          case 32:
            _context.next = 37;
            break;

          case 34:
            _context.prev = 34;
            _context.t1 = _context["catch"](12);

            _iterator3.e(_context.t1);

          case 37:
            _context.prev = 37;

            _iterator3.f();

            return _context.finish(37);

          case 40:
            remediator = getRemediator(neededToProceed, values, options);

            if (remediator) {
              _context.next = 43;
              break;
            }

            throw new AuthSdkError("\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [".concat(neededToProceed.reduce(function (acc, curr) {
              return acc ? acc + ' ,' + curr.name : curr.name;
            }, ''), "]\n    "));

          case 43:
            if (!flowMonitor.loopDetected(remediator)) {
              _context.next = 45;
              break;
            }

            throw new AuthSdkError("\n      Remediation run into loop, break!!! remediation: ".concat(remediator.getName(), "\n    "));

          case 45:
            if (remediator.canRemediate()) {
              _context.next = 48;
              break;
            }

            nextStep = getNextStep(remediator, idxResponse);
            return _context.abrupt("return", {
              idxResponse: idxResponse,
              nextStep: nextStep
            });

          case 48:
            name = remediator.getName();
            data = remediator.getData();
            _context.prev = 50;
            _context.next = 53;
            return idxResponse.proceed(name, data);

          case 53:
            idxResponse = _context.sent;
            _context.next = 56;
            return flowMonitor.trackRemediations(name);

          case 56:
            if (!idxResponse.interactionCode) {
              _context.next = 58;
              break;
            }

            return _context.abrupt("return", {
              idxResponse: idxResponse
            });

          case 58:
            _terminal = isTerminalResponse(idxResponse);
            _messages = getIdxMessages(idxResponse, remediators);

            if (!_terminal) {
              _context.next = 62;
              break;
            }

            return _context.abrupt("return", {
              terminal: _terminal,
              messages: _messages
            });

          case 62:
            if (!_messages.length) {
              _context.next = 65;
              break;
            }

            _nextStep = getNextStep(remediator, idxResponse);
            return _context.abrupt("return", {
              nextStep: _nextStep,
              messages: _messages
            });

          case 65:
            values = remediator.getValuesAfterProceed();
            return _context.abrupt("return", remediate(idxResponse, values, options));

          case 69:
            _context.prev = 69;
            _context.t2 = _context["catch"](50);
            return _context.abrupt("return", handleIdxError(_context.t2, remediators, remediator));

          case 72:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[12, 34, 37, 40], [18, 24], [50, 69]]);
  }));
  return _remediate.apply(this, arguments);
}

function getAllValues(idxRemediation) {
  return idxRemediation.value.map(function (r) {
    return r.name;
  });
}
function getRequiredValues(idxRemediation) {
  return idxRemediation.value.reduce(function (required, cur) {
    if (cur.required) {
      required.push(cur.name);
    }

    return required;
  }, []);
}
function titleCase(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
}
function getAuthenticatorFromRemediation(remediation) {
  return remediation.value.find(function (_ref) {
    var name = _ref.name;
    return name === 'authenticator';
  });
}

var Remediator = /*#__PURE__*/function () {
  function Remediator(remediation) {
    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Remediator);

    var _a;

    values.authenticators = ((_a = values.authenticators) === null || _a === void 0 ? void 0 : _a.map(function (authenticator) {
      return typeof authenticator === 'string' ? {
        key: authenticator
      } : authenticator;
    })) || [];
    this.values = values;
    this.remediation = remediation;
  }

  _createClass(Remediator, [{
    key: "getName",
    value: function getName() {
      return this.remediation.name;
    }
  }, {
    key: "canRemediate",
    value: function canRemediate() {
      var _this = this;

      if (!this.map) {
        return false;
      }

      var required = getRequiredValues(this.remediation);
      var needed = required.find(function (key) {
        return !_this.hasData(key);
      });

      if (needed) {
        return false;
      }

      return true;
    }
  }, {
    key: "getData",
    value: function getData(key) {
      var _this2 = this;

      if (!key) {
        var allValues = getAllValues(this.remediation);
        var res = allValues.reduce(function (data, key) {
          data[key] = _this2.getData(key);
          return data;
        }, {});
        return res;
      }

      if (typeof this["map".concat(titleCase(key))] === 'function') {
        return this["map".concat(titleCase(key))](this.remediation.value.find(function (_ref) {
          var name = _ref.name;
          return name === key;
        }));
      }

      if (!this.map) {
        return this.values[key];
      }

      var entry = this.map[key];

      if (!entry) {
        return this.values[key];
      }

      for (var i = 0; i < entry.length; i++) {
        var val = this.values[entry[i]];

        if (val) {
          return val;
        }
      }
    }
  }, {
    key: "hasData",
    value: function hasData(key) {
      var data = this.getData(key);

      if (_typeof(data) === 'object') {
        return !!Object.keys(data).find(function (key) {
          return !!data[key];
        });
      }

      return !!data;
    }
  }, {
    key: "getNextStep",
    value: function getNextStep() {
      var name = this.getName();
      var inputs = this.getInputs();
      var authenticator = this.getAuthenticator();
      var type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;
      return Object.assign(Object.assign({
        name: name,
        inputs: inputs
      }, type && {
        type: type
      }), authenticator && {
        authenticator: authenticator
      });
    }
  }, {
    key: "getInputs",
    value: function getInputs() {
      var _this3 = this;

      if (!this.map) {
        return [];
      }

      return Object.keys(this.map).reduce(function (inputs, key) {
        var inputFromRemediation = _this3.remediation.value.find(function (item) {
          return item.name === key;
        });

        if (!inputFromRemediation) {
          return inputs;
        }

        var input;
        var aliases = _this3.map[key];
        var type = inputFromRemediation.type;

        if (typeof _this3["getInput".concat(titleCase(key))] === 'function') {
          input = _this3["getInput".concat(titleCase(key))](inputFromRemediation);
        } else if (type !== 'object') {
          var name;

          if (aliases.length === 1) {
            name = aliases[0];
          } else {
            name = aliases.find(function (name) {
              return Object.keys(_this3.values).includes(name);
            });
          }

          if (name) {
            input = Object.assign(Object.assign({}, inputFromRemediation), {
              name: name
            });
          }
        }

        if (!input) {
          throw new AuthSdkError("Missing custom getInput".concat(titleCase(key), " method in Remediator: ").concat(_this3.getName()));
        }

        if (Array.isArray(input)) {
          input.forEach(function (i) {
            return inputs.push(i);
          });
        } else {
          inputs.push(input);
        }

        return inputs;
      }, []);
    }
  }, {
    key: "getMessages",
    value: function getMessages() {
      var _a, _b;

      if (!this.remediation.value) {
        return;
      }

      return (_b = (_a = this.remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce(function (messages, field) {
        if (field.messages) {
          messages = [].concat(_toConsumableArray(messages), _toConsumableArray(field.messages.value));
        }

        return messages;
      }, []);
    }
  }, {
    key: "getValuesAfterProceed",
    value: function getValuesAfterProceed() {
      var _a, _b;

      var authenticatorKey = (_a = this.getAuthenticator()) === null || _a === void 0 ? void 0 : _a.key;
      var authenticators = (_b = this.values.authenticators) === null || _b === void 0 ? void 0 : _b.filter(function (authenticator) {
        return authenticator.key !== authenticatorKey;
      });
      return Object.assign(Object.assign({}, this.values), {
        authenticators: authenticators
      });
    }
  }, {
    key: "getAuthenticator",
    value: function getAuthenticator() {
      var _a;

      return (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;
    }
  }]);

  return Remediator;
}();

function _createSuper$i(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$i(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$i() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var VerifyAuthenticator = /*#__PURE__*/function (_Remediator) {
  _inherits(VerifyAuthenticator, _Remediator);

  var _super = _createSuper$i(VerifyAuthenticator);

  function VerifyAuthenticator() {
    var _this;

    _classCallCheck(this, VerifyAuthenticator);

    _this = _super.apply(this, arguments);
    _this.map = {
      'credentials': []
    };
    return _this;
  }

  _createClass(VerifyAuthenticator, [{
    key: "canRemediate",
    value: function canRemediate() {
      return !!(this.values.password || this.values.verificationCode);
    }
  }, {
    key: "mapCredentials",
    value: function mapCredentials() {
      return {
        passcode: this.values.verificationCode || this.values.password
      };
    }
  }, {
    key: "getInputCredentials",
    value: function getInputCredentials(input) {
      var _a;

      var challengeType = this.getAuthenticator().type;
      var name = challengeType === 'password' ? 'password' : 'verificationCode';
      return Object.assign(Object.assign({}, (_a = input.form) === null || _a === void 0 ? void 0 : _a.value[0]), {
        name: name,
        type: 'string',
        required: input.required
      });
    }
  }, {
    key: "getValuesAfterProceed",
    value: function getValuesAfterProceed() {
      var values = _get(_getPrototypeOf(VerifyAuthenticator.prototype), "getValuesAfterProceed", this).call(this);

      var authenticator = this.getAuthenticator();

      if (authenticator.type === 'password') {
        delete values.password;
      } else {
        delete values.verificationCode;
      }

      return values;
    }
  }]);

  return VerifyAuthenticator;
}(Remediator);

function _createSuper$h(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$h(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$h() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EnrollAuthenticator = /*#__PURE__*/function (_VerifyAuthenticator) {
  _inherits(EnrollAuthenticator, _VerifyAuthenticator);

  var _super = _createSuper$h(EnrollAuthenticator);

  function EnrollAuthenticator() {
    _classCallCheck(this, EnrollAuthenticator);

    return _super.apply(this, arguments);
  }

  return EnrollAuthenticator;
}(VerifyAuthenticator);
EnrollAuthenticator.remediationName = 'enroll-authenticator';

function _createSuper$g(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$g() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ChallengeAuthenticator = /*#__PURE__*/function (_VerifyAuthenticator) {
  _inherits(ChallengeAuthenticator, _VerifyAuthenticator);

  var _super = _createSuper$g(ChallengeAuthenticator);

  function ChallengeAuthenticator() {
    _classCallCheck(this, ChallengeAuthenticator);

    return _super.apply(this, arguments);
  }

  return ChallengeAuthenticator;
}(VerifyAuthenticator);
ChallengeAuthenticator.remediationName = 'challenge-authenticator';

function _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$f(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$f() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ResetAuthenticator = /*#__PURE__*/function (_VerifyAuthenticator) {
  _inherits(ResetAuthenticator, _VerifyAuthenticator);

  var _super = _createSuper$f(ResetAuthenticator);

  function ResetAuthenticator() {
    _classCallCheck(this, ResetAuthenticator);

    return _super.apply(this, arguments);
  }

  return ResetAuthenticator;
}(VerifyAuthenticator);
ResetAuthenticator.remediationName = 'reset-authenticator';

function _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$e() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EnrollProfile = /*#__PURE__*/function (_Remediator) {
  _inherits(EnrollProfile, _Remediator);

  var _super = _createSuper$e(EnrollProfile);

  function EnrollProfile() {
    var _this;

    _classCallCheck(this, EnrollProfile);

    _this = _super.apply(this, arguments);
    _this.map = {
      'userProfile': []
    };
    return _this;
  }

  _createClass(EnrollProfile, [{
    key: "canRemediate",
    value: function canRemediate() {
      var userProfileFromValues = this.getData().userProfile;
      var userProfileFromRemediation = this.remediation.value.find(function (_ref) {
        var name = _ref.name;
        return name === 'userProfile';
      });
      return userProfileFromRemediation.form.value.reduce(function (canRemediate, curr) {
        if (curr.required) {
          canRemediate = canRemediate && !!userProfileFromValues[curr.name];
        }

        return canRemediate;
      }, true);
    }
  }, {
    key: "mapUserProfile",
    value: function mapUserProfile(_ref2) {
      var _this2 = this;

      var profileAttributes = _ref2.form.value;
      var attributeNames = profileAttributes.map(function (_ref3) {
        var name = _ref3.name;
        return name;
      });
      return attributeNames.reduce(function (attributeValues, attributeName) {
        return _this2.values[attributeName] ? Object.assign(Object.assign({}, attributeValues), _defineProperty({}, attributeName, _this2.values[attributeName])) : attributeValues;
      }, {});
    }
  }, {
    key: "getInputUserProfile",
    value: function getInputUserProfile(input) {
      return _toConsumableArray(input.form.value);
    }
  }, {
    key: "getErrorMessages",
    value: function getErrorMessages(errorRemediation) {
      return errorRemediation.value[0].form.value.reduce(function (errors, field) {
        if (field.messages) {
          errors.push(field.messages.value[0].message);
        }

        return errors;
      }, []);
    }
  }]);

  return EnrollProfile;
}(Remediator);
EnrollProfile.remediationName = 'enroll-profile';

function _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Identify = /*#__PURE__*/function (_Remediator) {
  _inherits(Identify, _Remediator);

  var _super = _createSuper$d(Identify);

  function Identify(remediation, values) {
    var _this;

    _classCallCheck(this, Identify);

    _this = _super.call(this, remediation, values);
    _this.map = {
      'identifier': ['username'],
      'credentials': [],
      'rememberMe': ['rememberMe']
    };
    var _this$values = _this.values,
        password = _this$values.password,
        authenticators = _this$values.authenticators;

    if (password && !authenticators.some(function (authenticator) {
      return authenticator.type === 'password';
    })) {
      _this.values = Object.assign(Object.assign({}, _this.values), {
        authenticators: [{
          type: 'password',
          key: AuthenticatorKey.OKTA_PASSWORD
        }].concat(_toConsumableArray(authenticators))
      });
    }

    return _this;
  }

  _createClass(Identify, [{
    key: "canRemediate",
    value: function canRemediate() {
      var _this$getData = this.getData(),
          identifier = _this$getData.identifier;

      return !!identifier;
    }
  }, {
    key: "mapCredentials",
    value: function mapCredentials() {
      return {
        passcode: this.values.password
      };
    }
  }, {
    key: "getInputCredentials",
    value: function getInputCredentials(input) {
      return Object.assign(Object.assign({}, input.form.value[0]), {
        name: 'password',
        required: input.required
      });
    }
  }, {
    key: "getValuesAfterProceed",
    value: function getValuesAfterProceed() {
      var _a;

      if (this.remediation.value.some(function (_ref) {
        var name = _ref.name;
        return name === 'credentials';
      })) {
        var authenticators = (_a = this.values.authenticators) === null || _a === void 0 ? void 0 : _a.filter(function (authenticator) {
          return authenticator.key !== AuthenticatorKey.OKTA_PASSWORD;
        });
        return Object.assign(Object.assign({}, this.values), {
          authenticators: authenticators
        });
      }

      return _get(_getPrototypeOf(Identify.prototype), "getValuesAfterProceed", this).call(this);
    }
  }]);

  return Identify;
}(Remediator);
Identify.remediationName = 'identify';

function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ReEnrollAuthenticator = /*#__PURE__*/function (_Remediator) {
  _inherits(ReEnrollAuthenticator, _Remediator);

  var _super = _createSuper$c(ReEnrollAuthenticator);

  function ReEnrollAuthenticator() {
    var _this;

    _classCallCheck(this, ReEnrollAuthenticator);

    _this = _super.apply(this, arguments);
    _this.map = {
      'credentials': []
    };
    return _this;
  }

  _createClass(ReEnrollAuthenticator, [{
    key: "mapCredentials",
    value: function mapCredentials() {
      return {
        passcode: this.values.newPassword
      };
    }
  }, {
    key: "getInputCredentials",
    value: function getInputCredentials(input) {
      var challengeType = this.getAuthenticator().type;
      var name = challengeType === 'password' ? 'newPassword' : 'verificationCode';
      return Object.assign(Object.assign({}, input.form.value[0]), {
        name: name
      });
    }
  }]);

  return ReEnrollAuthenticator;
}(Remediator);
ReEnrollAuthenticator.remediationName = 'reenroll-authenticator';

function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var RedirectIdp = /*#__PURE__*/function (_Remediator) {
  _inherits(RedirectIdp, _Remediator);

  var _super = _createSuper$b(RedirectIdp);

  function RedirectIdp() {
    _classCallCheck(this, RedirectIdp);

    return _super.apply(this, arguments);
  }

  _createClass(RedirectIdp, [{
    key: "canRemediate",
    value: function canRemediate() {
      return false;
    }
  }, {
    key: "getNextStep",
    value: function getNextStep() {
      var _this$remediation = this.remediation,
          name = _this$remediation.name,
          type = _this$remediation.type,
          idp = _this$remediation.idp,
          href = _this$remediation.href;
      return {
        name: name,
        type: type,
        idp: idp,
        href: href
      };
    }
  }]);

  return RedirectIdp;
}(Remediator);
RedirectIdp.remediationName = 'redirect-idp';

function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function findMatchedOption(authenticators, options) {
  var option;

  var _iterator = _createForOfIteratorHelper$1(authenticators),
      _step;

  try {
    var _loop = function _loop() {
      var authenticator = _step.value;
      option = options.find(function (_ref) {
        var relatesTo = _ref.relatesTo;
        return relatesTo.key === authenticator.key;
      });

      if (option) {
        return "break";
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();

      if (_ret === "break") break;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return option;
}

var SelectAuthenticator = /*#__PURE__*/function (_Remediator) {
  _inherits(SelectAuthenticator, _Remediator);

  var _super = _createSuper$a(SelectAuthenticator);

  function SelectAuthenticator(remediation) {
    var _this;

    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, SelectAuthenticator);

    _this = _super.call(this, remediation, values);
    _this.map = {
      authenticator: []
    };
    var _this$values = _this.values,
        selectedAuthenticator = _this$values.authenticator,
        authenticators = _this$values.authenticators;
    var hasSelectedAuthenticatorInList = authenticators === null || authenticators === void 0 ? void 0 : authenticators.some(function (authenticator) {
      return authenticator.key === selectedAuthenticator;
    });

    if (selectedAuthenticator && !hasSelectedAuthenticatorInList) {
      _this.values.authenticators = [].concat(_toConsumableArray(authenticators || []), [{
        key: selectedAuthenticator
      }]);
    }

    return _this;
  }

  _createClass(SelectAuthenticator, [{
    key: "canRemediate",
    value: function canRemediate() {
      var authenticators = this.values.authenticators;
      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);
      var options = authenticatorFromRemediation.options;

      if (!authenticators || !authenticators.length) {
        return false;
      }

      var matchedOption = findMatchedOption(authenticators, options);

      if (matchedOption) {
        return true;
      }

      return false;
    }
  }, {
    key: "getNextStep",
    value: function getNextStep() {
      var common = _get(_getPrototypeOf(SelectAuthenticator.prototype), "getNextStep", this).call(this);

      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);
      var options = authenticatorFromRemediation.options.map(function (option) {
        var label = option.label,
            key = option.relatesTo.key;
        return {
          label: label,
          value: key
        };
      });
      return Object.assign(Object.assign({}, common), {
        options: options
      });
    }
  }, {
    key: "mapAuthenticator",
    value: function mapAuthenticator(remediationValue) {
      var authenticators = this.values.authenticators;
      var options = remediationValue.options;
      var selectedOption = findMatchedOption(authenticators, options);
      return {
        id: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value.form.value.find(function (_ref2) {
          var name = _ref2.name;
          return name === 'id';
        }).value
      };
    }
  }, {
    key: "getInputAuthenticator",
    value: function getInputAuthenticator() {
      return {
        name: 'authenticator',
        key: 'string'
      };
    }
  }]);

  return SelectAuthenticator;
}(Remediator);

function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SelectAuthenticatorAuthenticate = /*#__PURE__*/function (_SelectAuthenticator) {
  _inherits(SelectAuthenticatorAuthenticate, _SelectAuthenticator);

  var _super = _createSuper$9(SelectAuthenticatorAuthenticate);

  function SelectAuthenticatorAuthenticate() {
    _classCallCheck(this, SelectAuthenticatorAuthenticate);

    return _super.apply(this, arguments);
  }

  return SelectAuthenticatorAuthenticate;
}(SelectAuthenticator);
SelectAuthenticatorAuthenticate.remediationName = 'select-authenticator-authenticate';

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SelectAuthenticatorEnroll = /*#__PURE__*/function (_SelectAuthenticator) {
  _inherits(SelectAuthenticatorEnroll, _SelectAuthenticator);

  var _super = _createSuper$8(SelectAuthenticatorEnroll);

  function SelectAuthenticatorEnroll() {
    _classCallCheck(this, SelectAuthenticatorEnroll);

    return _super.apply(this, arguments);
  }

  return SelectAuthenticatorEnroll;
}(SelectAuthenticator);
SelectAuthenticatorEnroll.remediationName = 'select-authenticator-enroll';

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var SelectEnrollProfile = /*#__PURE__*/function (_Remediator) {
  _inherits(SelectEnrollProfile, _Remediator);

  var _super = _createSuper$7(SelectEnrollProfile);

  function SelectEnrollProfile() {
    _classCallCheck(this, SelectEnrollProfile);

    return _super.apply(this, arguments);
  }

  _createClass(SelectEnrollProfile, [{
    key: "canRemediate",
    value: function canRemediate() {
      return true;
    }
  }]);

  return SelectEnrollProfile;
}(Remediator);
SelectEnrollProfile.remediationName = 'select-enroll-profile';

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AuthenticatorData = /*#__PURE__*/function (_Remediator) {
  _inherits(AuthenticatorData, _Remediator);

  var _super = _createSuper$6(AuthenticatorData);

  function AuthenticatorData(remediation) {
    var _this;

    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, AuthenticatorData);

    var _a;

    _this = _super.call(this, remediation, values);
    _this.map = {
      'authenticator': []
    };
    var authenticators = _this.values.authenticators;

    var authenticatorKey = _this.getAuthenticator().key;

    var authenticator = (_a = authenticators) === null || _a === void 0 ? void 0 : _a.find(function (authenticator) {
      return authenticator.key === authenticatorKey;
    });

    if (authenticator) {
      _this.values.authenticators = authenticators.map(function (authenticator) {
        if (authenticatorKey === authenticator.type) {
          return _this.mapAuthenticatorFromValues(authenticator);
        }

        return authenticator;
      });
    } else {
      _this.values.authenticators = [].concat(_toConsumableArray(authenticators), [_this.mapAuthenticatorFromValues()]);
    }

    return _this;
  }

  _createClass(AuthenticatorData, [{
    key: "getNextStep",
    value: function getNextStep() {
      var common = _get(_getPrototypeOf(AuthenticatorData.prototype), "getNextStep", this).call(this);

      var options = this.getMethodTypes();
      return Object.assign(Object.assign({}, common), options && {
        options: options
      });
    }
  }, {
    key: "getAuthenticatorFromValues",
    value: function getAuthenticatorFromValues() {
      if (!this.values.authenticators) {
        return null;
      }

      var authenticatorKey = this.getAuthenticator().key;
      var authenticator = this.values.authenticators.find(function (authenticator) {
        return authenticator.key === authenticatorKey;
      });
      return authenticator;
    }
  }, {
    key: "mapAuthenticatorFromValues",
    value: function mapAuthenticatorFromValues(authenticator) {
      var key = this.getAuthenticator().key;
      var methodType = this.values.methodType;
      return Object.assign(Object.assign({
        key: key
      }, authenticator && authenticator), methodType && {
        methodType: methodType
      });
    }
  }, {
    key: "getAuthenticatorFromRemediation",
    value: function getAuthenticatorFromRemediation() {
      var authenticator = this.remediation.value.find(function (_ref) {
        var name = _ref.name;
        return name === 'authenticator';
      });
      return authenticator;
    }
  }, {
    key: "getMethodTypes",
    value: function getMethodTypes() {
      var _a;

      var authenticator = this.getAuthenticatorFromRemediation();
      return (_a = authenticator.form.value.find(function (_ref2) {
        var name = _ref2.name;
        return name === 'methodType';
      })) === null || _a === void 0 ? void 0 : _a.options;
    }
  }]);

  return AuthenticatorData;
}(Remediator);

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AuthenticatorVerificationData = /*#__PURE__*/function (_AuthenticatorData) {
  _inherits(AuthenticatorVerificationData, _AuthenticatorData);

  var _super = _createSuper$5(AuthenticatorVerificationData);

  function AuthenticatorVerificationData() {
    _classCallCheck(this, AuthenticatorVerificationData);

    return _super.apply(this, arguments);
  }

  _createClass(AuthenticatorVerificationData, [{
    key: "canRemediate",
    value: function canRemediate() {
      var authenticator = this.getAuthenticatorFromValues();
      return !!(authenticator && authenticator.methodType);
    }
  }, {
    key: "mapAuthenticator",
    value: function mapAuthenticator() {
      var authenticatorFromRemediation = this.getAuthenticatorFromRemediation();
      var authenticatorFromValues = this.getAuthenticatorFromValues();
      return {
        id: authenticatorFromRemediation.form.value.find(function (_ref) {
          var name = _ref.name;
          return name === 'id';
        }).value,
        enrollmentId: authenticatorFromRemediation.form.value.find(function (_ref2) {
          var name = _ref2.name;
          return name === 'enrollmentId';
        }).value,
        methodType: authenticatorFromValues.methodType
      };
    }
  }, {
    key: "getInputAuthenticator",
    value: function getInputAuthenticator() {
      var authenticator = this.getAuthenticatorFromRemediation();
      var methodType = authenticator.form.value.find(function (_ref3) {
        var name = _ref3.name;
        return name === 'methodType';
      });

      if (methodType && methodType.options) {
        return {
          name: 'methodType',
          type: 'string',
          required: true
        };
      }

      var inputs = _toConsumableArray(authenticator.form.value);

      return inputs;
    }
  }]);

  return AuthenticatorVerificationData;
}(AuthenticatorData);
AuthenticatorVerificationData.remediationName = 'authenticator-verification-data';

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AuthenticatorEnrollmentData = /*#__PURE__*/function (_AuthenticatorData) {
  _inherits(AuthenticatorEnrollmentData, _AuthenticatorData);

  var _super = _createSuper$4(AuthenticatorEnrollmentData);

  function AuthenticatorEnrollmentData() {
    _classCallCheck(this, AuthenticatorEnrollmentData);

    return _super.apply(this, arguments);
  }

  _createClass(AuthenticatorEnrollmentData, [{
    key: "canRemediate",
    value: function canRemediate() {
      var authenticator = this.getAuthenticatorFromValues();
      return !!(authenticator && authenticator.methodType && authenticator.phoneNumber);
    }
  }, {
    key: "mapAuthenticator",
    value: function mapAuthenticator() {
      var authenticatorFromValues = this.getAuthenticatorFromValues();
      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);
      return {
        id: authenticatorFromRemediation.form.value.find(function (_ref) {
          var name = _ref.name;
          return name === 'id';
        }).value,
        methodType: authenticatorFromValues.methodType,
        phoneNumber: authenticatorFromValues.phoneNumber
      };
    }
  }, {
    key: "getInputAuthenticator",
    value: function getInputAuthenticator() {
      return [{
        name: 'methodType',
        type: 'string',
        required: true
      }, {
        name: 'phoneNumber',
        type: 'string',
        required: true
      }];
    }
  }, {
    key: "mapAuthenticatorFromValues",
    value: function mapAuthenticatorFromValues(authenticator) {
      authenticator = _get(_getPrototypeOf(AuthenticatorEnrollmentData.prototype), "mapAuthenticatorFromValues", this).call(this, authenticator);
      var phoneNumber = this.values.phoneNumber;
      return Object.assign(Object.assign({}, authenticator), phoneNumber && {
        phoneNumber: phoneNumber
      });
    }
  }]);

  return AuthenticatorEnrollmentData;
}(AuthenticatorData);
AuthenticatorEnrollmentData.remediationName = 'authenticator-enrollment-data';

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Skip = /*#__PURE__*/function (_Remediator) {
  _inherits(Skip, _Remediator);

  var _super = _createSuper$3(Skip);

  function Skip() {
    _classCallCheck(this, Skip);

    return _super.apply(this, arguments);
  }

  _createClass(Skip, [{
    key: "canRemediate",
    value: function canRemediate() {
      return !!this.values.skip;
    }
  }]);

  return Skip;
}(Remediator);
Skip.remediationName = 'skip';

var remediators = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Remediator: Remediator,
  EnrollAuthenticator: EnrollAuthenticator,
  ChallengeAuthenticator: ChallengeAuthenticator,
  ResetAuthenticator: ResetAuthenticator,
  EnrollProfile: EnrollProfile,
  Identify: Identify,
  ReEnrollAuthenticator: ReEnrollAuthenticator,
  RedirectIdp: RedirectIdp,
  SelectAuthenticatorAuthenticate: SelectAuthenticatorAuthenticate,
  SelectAuthenticatorEnroll: SelectAuthenticatorEnroll,
  SelectEnrollProfile: SelectEnrollProfile,
  AuthenticatorVerificationData: AuthenticatorVerificationData,
  AuthenticatorEnrollmentData: AuthenticatorEnrollmentData,
  Skip: Skip
});

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getEnabledFeatures(idxResponse) {
  var res = [];
  var actions = idxResponse.actions,
      neededToProceed = idxResponse.neededToProceed;

  if (actions['currentAuthenticator-recover']) {
    res.push(IdxFeature.PASSWORD_RECOVERY);
  }

  if (neededToProceed.some(function (_ref) {
    var name = _ref.name;
    return name === 'select-enroll-profile';
  })) {
    res.push(IdxFeature.REGISTRATION);
  }

  if (neededToProceed.some(function (_ref2) {
    var name = _ref2.name;
    return name === 'redirect-idp';
  })) {
    res.push(IdxFeature.SOCIAL_IDP);
  }

  return res;
}

function getAvailableSteps(remediations) {
  var res = [];
  var remediatorMap = Object.values(remediators).reduce(function (map, remediatorClass) {
    if (remediatorClass.remediationName) {
      map[remediatorClass.remediationName] = remediatorClass;
    }

    return map;
  }, {});

  var _iterator = _createForOfIteratorHelper(remediations),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var remediation = _step.value;
      var T = remediatorMap[remediation.name];

      if (T) {
        var remediator = new T(remediation);
        res.push(remediator.getNextStep());
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return res;
}

function run(_x) {
  return _run.apply(this, arguments);
}

function _run() {
  _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient) {
    var options,
        tokens,
        nextStep,
        messages,
        error,
        meta,
        enabledFeatures,
        availableSteps,
        status,
        shouldClearTransaction,
        idxResponse,
        interactionHandle,
        metaFromResp,
        flow,
        stateTokenExternalId,
        state,
        interactResponse,
        values,
        _yield$remediate,
        idxResponseFromResp,
        nextStepFromResp,
        terminal,
        canceled,
        messagesFromResp,
        _metaFromResp,
        clientId,
        codeVerifier,
        ignoreSignature,
        redirectUri,
        urls,
        scopes,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            status = IdxStatus.PENDING;
            shouldClearTransaction = false;
            _context.prev = 3;
            flow = options.flow, stateTokenExternalId = options.stateTokenExternalId, state = options.state;

            if (flow) {
              authClient.idx.setFlow(flow);
            }

            metaFromResp = getSavedTransactionMeta(authClient, {
              state: state
            });
            interactionHandle = metaFromResp === null || metaFromResp === void 0 ? void 0 : metaFromResp.interactionHandle;

            if (!(!interactionHandle && !stateTokenExternalId)) {
              _context.next = 15;
              break;
            }

            authClient.transactionManager.clear();
            _context.next = 12;
            return interact(authClient, options);

          case 12:
            interactResponse = _context.sent;
            interactionHandle = interactResponse.interactionHandle;
            metaFromResp = interactResponse.meta;

          case 15:
            _context.next = 17;
            return introspect(authClient, {
              interactionHandle: interactionHandle,
              stateTokenExternalId: stateTokenExternalId
            });

          case 17:
            idxResponse = _context.sent;

            if (!(!options.remediators && !options.actions)) {
              _context.next = 24;
              break;
            }

            meta = metaFromResp;
            enabledFeatures = getEnabledFeatures(idxResponse);
            availableSteps = getAvailableSteps(idxResponse.neededToProceed);
            _context.next = 53;
            break;

          case 24:
            values = Object.assign(Object.assign({}, options), {
              stateHandle: idxResponse.rawIdxState.stateHandle
            });
            _context.next = 27;
            return remediate(idxResponse, values, options);

          case 27:
            _yield$remediate = _context.sent;
            idxResponseFromResp = _yield$remediate.idxResponse;
            nextStepFromResp = _yield$remediate.nextStep;
            terminal = _yield$remediate.terminal;
            canceled = _yield$remediate.canceled;
            messagesFromResp = _yield$remediate.messages;
            nextStep = nextStepFromResp;
            messages = messagesFromResp;

            if (nextStep && idxResponseFromResp) {
              authClient.transactionManager.saveIdxResponse(idxResponseFromResp.rawIdxState);
            }

            if (terminal) {
              status = IdxStatus.TERMINAL;
              shouldClearTransaction = true;
            }

            if (!canceled) {
              _context.next = 42;
              break;
            }

            status = IdxStatus.CANCELED;
            shouldClearTransaction = true;
            _context.next = 53;
            break;

          case 42:
            if (!(idxResponseFromResp === null || idxResponseFromResp === void 0 ? void 0 : idxResponseFromResp.interactionCode)) {
              _context.next = 53;
              break;
            }

            _context.next = 45;
            return options.flowMonitor.isFinished();

          case 45:
            if (_context.sent) {
              _context.next = 47;
              break;
            }

            throw new AuthSdkError('Current flow is not supported, check policy settings in your org.');

          case 47:
            _metaFromResp = metaFromResp, clientId = _metaFromResp.clientId, codeVerifier = _metaFromResp.codeVerifier, ignoreSignature = _metaFromResp.ignoreSignature, redirectUri = _metaFromResp.redirectUri, urls = _metaFromResp.urls, scopes = _metaFromResp.scopes;
            _context.next = 50;
            return authClient.token.exchangeCodeForTokens({
              interactionCode: idxResponseFromResp.interactionCode,
              clientId: clientId,
              codeVerifier: codeVerifier,
              ignoreSignature: ignoreSignature,
              redirectUri: redirectUri,
              scopes: scopes
            }, urls);

          case 50:
            tokens = _context.sent;
            status = IdxStatus.SUCCESS;
            shouldClearTransaction = true;

          case 53:
            _context.next = 60;
            break;

          case 55:
            _context.prev = 55;
            _context.t0 = _context["catch"](3);
            error = _context.t0;
            status = IdxStatus.FAILURE;
            shouldClearTransaction = true;

          case 60:
            if (shouldClearTransaction) {
              authClient.transactionManager.clear();
            }

            return _context.abrupt("return", Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
              _idxResponse: idxResponse,
              status: status
            }, meta && {
              meta: meta
            }), enabledFeatures && {
              enabledFeatures: enabledFeatures
            }), availableSteps && {
              availableSteps: availableSteps
            }), tokens && {
              tokens: tokens.tokens
            }), nextStep && {
              nextStep: nextStep
            }), messages && {
              messages: messages
            }), error && {
              error: error
            }));

          case 62:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 55]]);
  }));
  return _run.apply(this, arguments);
}

var AuthenticationFlow = {
  'identify': Identify,
  'select-authenticator-authenticate': SelectAuthenticatorAuthenticate,
  'select-authenticator-enroll': SelectAuthenticatorEnroll,
  'authenticator-enrollment-data': AuthenticatorEnrollmentData,
  'authenticator-verification-data': AuthenticatorVerificationData,
  'enroll-authenticator': EnrollAuthenticator,
  'challenge-authenticator': ChallengeAuthenticator,
  'reenroll-authenticator': ReEnrollAuthenticator,
  'redirect-idp': RedirectIdp
};

var FlowMonitor = /*#__PURE__*/function () {
  function FlowMonitor(authClient) {
    _classCallCheck(this, FlowMonitor);

    this.authClient = authClient;
  }

  _createClass(FlowMonitor, [{
    key: "loopDetected",
    value: function loopDetected(remediator) {
      if (!this.previousRemediator) {
        this.previousRemediator = remediator;
        return false;
      }

      if (this.previousRemediator.getName() === remediator.getName()) {
        return true;
      }

      this.previousRemediator = remediator;
      return false;
    }
  }, {
    key: "isRemediatorCandidate",
    value: function isRemediatorCandidate(remediator, remediations, values) {
      var remediatorName = remediator.getName();

      if (!values.skip && remediatorName === 'skip') {
        return false;
      }

      if (values.skip && remediatorName !== 'skip') {
        return false;
      }

      return true;
    }
  }, {
    key: "trackRemediations",
    value: function () {
      var _trackRemediations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {
        var meta, remediations;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getTransactionMeta(this.authClient);

              case 2:
                meta = _context.sent;
                remediations = meta.remediations || [];
                meta = Object.assign(Object.assign({}, meta), {
                  remediations: [].concat(_toConsumableArray(remediations), [name])
                });
                saveTransactionMeta(this.authClient, meta);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function trackRemediations(_x) {
        return _trackRemediations.apply(this, arguments);
      }

      return trackRemediations;
    }()
  }, {
    key: "isFinished",
    value: function isFinished() {
      return Promise.resolve(true);
    }
  }]);

  return FlowMonitor;
}();

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AuthenticationFlowMonitor = /*#__PURE__*/function (_FlowMonitor) {
  _inherits(AuthenticationFlowMonitor, _FlowMonitor);

  var _super = _createSuper$2(AuthenticationFlowMonitor);

  function AuthenticationFlowMonitor() {
    _classCallCheck(this, AuthenticationFlowMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(AuthenticationFlowMonitor, [{
    key: "isRemediatorCandidate",
    value: function isRemediatorCandidate(remediator, remediations, values) {
      var _a;

      var prevRemediatorName = (_a = this.previousRemediator) === null || _a === void 0 ? void 0 : _a.getName();
      var remediatorName = remediator.getName();

      if (remediatorName === 'select-authenticator-authenticate' && ['select-authenticator-authenticate'].includes(prevRemediatorName)) {
        return false;
      }

      if (remediatorName === 'select-authenticator-authenticate' && remediations.some(function (_ref) {
        var name = _ref.name;
        return name === 'challenge-authenticator';
      })) {
        return false;
      }

      if (remediatorName === 'select-authenticator-enroll' && ['select-authenticator-enroll', 'authenticator-enrollment-data'].includes(prevRemediatorName)) {
        return false;
      }

      return _get(_getPrototypeOf(AuthenticationFlowMonitor.prototype), "isRemediatorCandidate", this).call(this, remediator, remediations, values);
    }
  }]);

  return AuthenticationFlowMonitor;
}(FlowMonitor);

var PasswordRecoveryFlow = {
  'identify': Identify,
  'identify-recovery': Identify,
  'select-authenticator-authenticate': SelectAuthenticatorAuthenticate,
  'challenge-authenticator': ChallengeAuthenticator,
  'authenticator-verification-data': AuthenticatorVerificationData,
  'reset-authenticator': ResetAuthenticator,
  'reenroll-authenticator': ReEnrollAuthenticator
};

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var PasswordRecoveryFlowMonitor = /*#__PURE__*/function (_FlowMonitor) {
  _inherits(PasswordRecoveryFlowMonitor, _FlowMonitor);

  var _super = _createSuper$1(PasswordRecoveryFlowMonitor);

  function PasswordRecoveryFlowMonitor() {
    _classCallCheck(this, PasswordRecoveryFlowMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(PasswordRecoveryFlowMonitor, [{
    key: "isRemediatorCandidate",
    value: function isRemediatorCandidate(remediator, remediations, values) {
      var _a;

      var prevRemediatorName = (_a = this.previousRemediator) === null || _a === void 0 ? void 0 : _a.getName();
      var remediatorName = remediator.getName();

      if (remediatorName === 'select-authenticator-authenticate' && ['select-authenticator-authenticate', 'reenroll-authenticator'].includes(prevRemediatorName)) {
        return false;
      }

      if (remediatorName === 'select-authenticator-authenticate' && remediations.some(function (_ref) {
        var name = _ref.name;
        return name === 'challenge-authenticator';
      })) {
        return false;
      }

      return _get(_getPrototypeOf(PasswordRecoveryFlowMonitor.prototype), "isRemediatorCandidate", this).call(this, remediator, remediations, values);
    }
  }, {
    key: "isFinished",
    value: function () {
      var _isFinished = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _yield$getTransaction, remediations;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getTransactionMeta(this.authClient);

              case 2:
                _yield$getTransaction = _context.sent;
                remediations = _yield$getTransaction.remediations;

                if (remediations.includes('reset-authenticator')) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", false);

              case 6:
                _context.next = 8;
                return _get(_getPrototypeOf(PasswordRecoveryFlowMonitor.prototype), "isFinished", this).call(this);

              case 8:
                return _context.abrupt("return", _context.sent);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function isFinished() {
        return _isFinished.apply(this, arguments);
      }

      return isFinished;
    }()
  }]);

  return PasswordRecoveryFlowMonitor;
}(FlowMonitor);

var RegistrationFlow = {
  'select-enroll-profile': SelectEnrollProfile,
  'enroll-profile': EnrollProfile,
  'authenticator-enrollment-data': AuthenticatorEnrollmentData,
  'select-authenticator-enroll': SelectAuthenticatorEnroll,
  'enroll-authenticator': EnrollAuthenticator,
  'skip': Skip
};

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var RegistrationFlowMonitor = /*#__PURE__*/function (_FlowMonitor) {
  _inherits(RegistrationFlowMonitor, _FlowMonitor);

  var _super = _createSuper(RegistrationFlowMonitor);

  function RegistrationFlowMonitor() {
    _classCallCheck(this, RegistrationFlowMonitor);

    return _super.apply(this, arguments);
  }

  _createClass(RegistrationFlowMonitor, [{
    key: "isRemediatorCandidate",
    value: function isRemediatorCandidate(remediator, remediations, values) {
      var _a;

      var prevRemediatorName = (_a = this.previousRemediator) === null || _a === void 0 ? void 0 : _a.getName();
      var remediatorName = remediator.getName();

      if (remediatorName === 'select-authenticator-enroll' && ['select-authenticator-enroll', 'authenticator-enrollment-data'].includes(prevRemediatorName)) {
        return false;
      }

      return _get(_getPrototypeOf(RegistrationFlowMonitor.prototype), "isRemediatorCandidate", this).call(this, remediator, remediations, values);
    }
  }]);

  return RegistrationFlowMonitor;
}(FlowMonitor);

function getFlowSpecification(oktaAuth) {
  var flow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'proceed';
  var remediators, flowMonitor, actions;

  switch (flow) {
    case 'register':
    case 'signup':
    case 'enrollProfile':
      remediators = RegistrationFlow;
      flowMonitor = new RegistrationFlowMonitor(oktaAuth);
      break;

    case 'recoverPassword':
    case 'resetPassword':
      remediators = PasswordRecoveryFlow;
      flowMonitor = new PasswordRecoveryFlowMonitor(oktaAuth);
      actions = ['currentAuthenticator-recover', 'currentAuthenticatorEnrollment-recover'];
      break;

    default:
      remediators = AuthenticationFlow;
      flowMonitor = new AuthenticationFlowMonitor(oktaAuth);
      break;
  }

  return {
    flow: flow,
    remediators: remediators,
    flowMonitor: flowMonitor,
    actions: actions
  };
}

function authenticate(_x, _x2) {
  return _authenticate.apply(this, arguments);
}

function _authenticate() {
  _authenticate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, options) {
    var flowSpec;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            flowSpec = getFlowSpecification(authClient, 'authenticate');
            return _context.abrupt("return", run(authClient, Object.assign(Object.assign({}, options), flowSpec)));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _authenticate.apply(this, arguments);
}

function cancel(_x, _x2) {
  return _cancel.apply(this, arguments);
}

function _cancel() {
  _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, options) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", run(authClient, Object.assign(Object.assign({}, options), {
              actions: ['cancel']
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _cancel.apply(this, arguments);
}

function canProceed(authClient, options) {
  var meta = getSavedTransactionMeta(authClient, options);
  return !!meta;
}
function proceed(_x) {
  return _proceed.apply(this, arguments);
}

function _proceed() {
  _proceed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient) {
    var options,
        stateTokenExternalId,
        state,
        meta,
        flowSpec,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            stateTokenExternalId = options.stateTokenExternalId, state = options.state;
            meta = getSavedTransactionMeta(authClient, {
              state: state
            });

            if (!(!meta && !stateTokenExternalId)) {
              _context.next = 5;
              break;
            }

            throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');

          case 5:
            flowSpec = getFlowSpecification(authClient, meta === null || meta === void 0 ? void 0 : meta.flow);
            return _context.abrupt("return", run(authClient, Object.assign(Object.assign({}, options), flowSpec)));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _proceed.apply(this, arguments);
}

function startTransaction(_x) {
  return _startTransaction.apply(this, arguments);
}

function _startTransaction() {
  _startTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient) {
    var options,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            authClient.transactionManager.clear();
            return _context.abrupt("return", run(authClient, options));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _startTransaction.apply(this, arguments);
}

function register(_x, _x2) {
  return _register.apply(this, arguments);
}

function _register() {
  _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, options) {
    var _yield$startTransacti, enabledFeatures, error, flowSpec;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (transactionMetaExist(authClient)) {
              _context.next = 8;
              break;
            }

            _context.next = 3;
            return startTransaction(authClient, Object.assign({
              flow: 'register'
            }, options));

          case 3:
            _yield$startTransacti = _context.sent;
            enabledFeatures = _yield$startTransacti.enabledFeatures;

            if (!(enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION))) {
              _context.next = 8;
              break;
            }

            error = new AuthSdkError('Registration is not supported based on your current org configuration.');
            return _context.abrupt("return", {
              status: IdxStatus.FAILURE,
              error: error
            });

          case 8:
            flowSpec = getFlowSpecification(authClient, 'register');
            return _context.abrupt("return", run(authClient, Object.assign(Object.assign({}, options), flowSpec)));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _register.apply(this, arguments);
}

function recoverPassword(_x, _x2) {
  return _recoverPassword.apply(this, arguments);
}

function _recoverPassword() {
  _recoverPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, options) {
    var flowSpec;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            flowSpec = getFlowSpecification(authClient, 'recoverPassword');
            return _context.abrupt("return", run(authClient, Object.assign(Object.assign({}, options), flowSpec)));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _recoverPassword.apply(this, arguments);
}

function handleInteractionCodeRedirect(_x, _x2) {
  return _handleInteractionCodeRedirect.apply(this, arguments);
}

function _handleInteractionCodeRedirect() {
  _handleInteractionCodeRedirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(authClient, url) {
    var meta, codeVerifier, savedState, _URL, searchParams, state, interactionCode, error, _yield$authClient$tok, tokens;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            meta = authClient.transactionManager.load();

            if (meta) {
              _context.next = 3;
              break;
            }

            throw new AuthSdkError('No transaction data was found in storage');

          case 3:
            codeVerifier = meta.codeVerifier, savedState = meta.state;
            _URL = new URL(url), searchParams = _URL.searchParams;
            state = searchParams.get('state');
            interactionCode = searchParams.get('interaction_code');
            error = searchParams.get('error');

            if (!error) {
              _context.next = 10;
              break;
            }

            throw new OAuthError(error, searchParams.get('error_description'));

          case 10:
            if (!(state !== savedState)) {
              _context.next = 12;
              break;
            }

            throw new AuthSdkError('State in redirect uri does not match with transaction state');

          case 12:
            if (interactionCode) {
              _context.next = 14;
              break;
            }

            throw new AuthSdkError('Unable to parse interaction_code from the url');

          case 14:
            _context.next = 16;
            return authClient.token.exchangeCodeForTokens({
              interactionCode: interactionCode,
              codeVerifier: codeVerifier
            });

          case 16:
            _yield$authClient$tok = _context.sent;
            tokens = _yield$authClient$tok.tokens;
            authClient.tokenManager.setTokens(tokens);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _handleInteractionCodeRedirect.apply(this, arguments);
}

function setGlobalRequestInterceptor(fn) {
  idx.client.interceptors.request.use(fn);
}
function createGlobalRequestInterceptor(sdk) {
  return function (requestConfig) {
    var oktaUserAgentHeader = sdk._oktaUserAgent.getHttpHeader();

    var headers = Object.assign(Object.assign({}, oktaUserAgentHeader), sdk.options.headers);
    Object.keys(headers).forEach(function (name) {
      requestConfig.headers[name] = headers[name];
    });
  };
}

var OktaUserAgent = /*#__PURE__*/function () {
  function OktaUserAgent() {
    _classCallCheck(this, OktaUserAgent);

    this.environments = ["okta-auth-js/".concat("5.9.1")];
  }

  _createClass(OktaUserAgent, [{
    key: "addEnvironment",
    value: function addEnvironment(env) {
      this.environments.push(env);
    }
  }, {
    key: "getHttpHeader",
    value: function getHttpHeader() {
      this.maybeAddNodeEnvironment();
      return {
        'X-Okta-User-Agent-Extended': this.environments.join(' ')
      };
    }
  }, {
    key: "getVersion",
    value: function getVersion() {
      return "5.9.1";
    }
  }, {
    key: "maybeAddNodeEnvironment",
    value: function maybeAddNodeEnvironment() {
      if (isBrowser() || !process || !process.versions) {
        return;
      }

      var version = process.versions.node;
      this.environments.push("nodejs/".concat(version));
    }
  }]);

  return OktaUserAgent;
}();

var Emitter = require('tiny-emitter');

var OktaAuth = /*#__PURE__*/function () {
  function OktaAuth(args) {
    var _this = this;

    _classCallCheck(this, OktaAuth);

    var options = this.options = buildOptions(args);
    this.storageManager = new StorageManager(options.storageManager, options.cookies, options.storageUtil);
    this.transactionManager = new TransactionManager(Object.assign({
      storageManager: this.storageManager
    }, options.transactionManager));
    this._oktaUserAgent = new OktaUserAgent();
    this.tx = {
      status: transactionStatus.bind(null, this),
      resume: resumeTransaction.bind(null, this),
      exists: Object.assign(transactionExists.bind(null, this), {
        _get: function _get(name) {
          var storage = options.storageUtil.storage;
          return storage.get(name);
        }
      }),
      introspect: introspect$1.bind(null, this)
    };
    this.pkce = {
      DEFAULT_CODE_CHALLENGE_METHOD: PKCE.DEFAULT_CODE_CHALLENGE_METHOD,
      generateVerifier: PKCE.generateVerifier,
      computeChallenge: PKCE.computeChallenge
    };
    Object.assign(this.options.storageUtil, {
      getPKCEStorage: this.storageManager.getLegacyPKCEStorage.bind(this.storageManager),
      getHttpCache: this.storageManager.getHttpCache.bind(this.storageManager)
    });
    this._pending = {
      handleLogin: false
    };

    if (isBrowser()) {
      this.options = Object.assign(this.options, {
        redirectUri: toAbsoluteUrl(args.redirectUri, window.location.origin)
      });
      this.userAgent = getUserAgent(args, "okta-auth-js/".concat("5.9.1"));
    } else {
      this.userAgent = getUserAgent(args, "okta-auth-js-server/".concat("5.9.1"));
    }

    if (!args.maxClockSkew && args.maxClockSkew !== 0) {
      this.options.maxClockSkew = DEFAULT_MAX_CLOCK_SKEW;
    } else {
      this.options.maxClockSkew = args.maxClockSkew;
    }

    this.options.ignoreLifetime = !!args.ignoreLifetime;
    this.session = {
      close: closeSession.bind(null, this),
      exists: sessionExists.bind(null, this),
      get: getSession.bind(null, this),
      refresh: refreshSession.bind(null, this),
      setCookieAndRedirect: setCookieAndRedirect.bind(null, this)
    };
    this._tokenQueue = new PromiseQueue();
    this.token = {
      prepareTokenParams: prepareTokenParams.bind(null, this),
      exchangeCodeForTokens: exchangeCodeForTokens.bind(null, this),
      getWithoutPrompt: getWithoutPrompt.bind(null, this),
      getWithPopup: getWithPopup.bind(null, this),
      getWithRedirect: getWithRedirect.bind(null, this),
      parseFromUrl: parseFromUrl.bind(null, this),
      decode: decodeToken,
      revoke: revokeToken.bind(null, this),
      renew: renewToken.bind(null, this),
      renewTokensWithRefresh: renewTokensWithRefresh.bind(null, this),
      renewTokens: renewTokens.bind(null, this),
      getUserInfo: getUserInfo.bind(null, this),
      verify: verifyToken.bind(null, this),
      isLoginRedirect: isLoginRedirect.bind(null, this)
    };
    var syncMethods = ['decode', 'isLoginRedirect'];
    Object.keys(this.token).forEach(function (key) {
      if (syncMethods.indexOf(key) >= 0) {
        return;
      }

      var method = _this.token[key];
      _this.token[key] = PromiseQueue.prototype.push.bind(_this._tokenQueue, method, null);
    });
    Object.assign(this.token.getWithRedirect, {
      _setLocation: function _setLocation(url) {
        window.location = url;
      }
    });
    Object.assign(this.token.parseFromUrl, {
      _getHistory: function _getHistory() {
        return window.history;
      },
      _getLocation: function _getLocation() {
        return window.location;
      },
      _getDocument: function _getDocument() {
        return window.document;
      }
    });
    this.idx = {
      interact: interact.bind(null, this),
      introspect: introspect.bind(null, this),
      authenticate: authenticate.bind(null, this),
      register: register.bind(null, this),
      proceed: proceed.bind(null, this),
      cancel: cancel.bind(null, this),
      recoverPassword: recoverPassword.bind(null, this),
      handleInteractionCodeRedirect: handleInteractionCodeRedirect.bind(null, this),
      startTransaction: startTransaction.bind(null, this),
      setFlow: function setFlow(flow) {
        _this.options.flow = flow;
      },
      getFlow: function getFlow() {
        return _this.options.flow;
      },
      canProceed: canProceed.bind(null, this)
    };
    setGlobalRequestInterceptor(createGlobalRequestInterceptor(this));
    this.http = {
      setRequestHeader: setRequestHeader.bind(null, this)
    };
    this.fingerprint = fingerprint.bind(null, this);
    this.emitter = new Emitter();
    this.tokenManager = new TokenManager(this, args.tokenManager);
    this.authStateManager = new AuthStateManager(this);
  }

  _createClass(OktaAuth, [{
    key: "start",
    value: function start() {
      this.tokenManager.start();

      if (!this.token.isLoginRedirect()) {
        this.authStateManager.updateAuthState();
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      this.tokenManager.stop();
    }
  }, {
    key: "setHeaders",
    value: function setHeaders(headers) {
      this.options.headers = Object.assign({}, this.options.headers, headers);
    }
  }, {
    key: "isInteractionRequired",
    value: function isInteractionRequired$1(hashOrSearch) {
      return isInteractionRequired(this, hashOrSearch);
    }
  }, {
    key: "isInteractionRequiredError",
    value: function isInteractionRequiredError$1(error) {
      return isInteractionRequiredError(error);
    }
  }, {
    key: "isEmailVerifyCallback",
    value: function isEmailVerifyCallback$1(urlPath) {
      return isEmailVerifyCallback(urlPath);
    }
  }, {
    key: "parseEmailVerifyCallback",
    value: function parseEmailVerifyCallback$1(urlPath) {
      return parseEmailVerifyCallback(urlPath);
    }
  }, {
    key: "signIn",
    value: function () {
      var _signIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.signInWithCredentials(opts));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function signIn(_x) {
        return _signIn.apply(this, arguments);
      }

      return signIn;
    }()
  }, {
    key: "signInWithCredentials",
    value: function () {
      var _signInWithCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(opts) {
        var _this2 = this;

        var _postToTransaction;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = clone(opts || {});

                _postToTransaction = function _postToTransaction(options) {
                  delete opts.sendFingerprint;
                  return postToTransaction(_this2, '/api/v1/authn', opts, options);
                };

                if (opts.sendFingerprint) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return", _postToTransaction());

              case 4:
                return _context2.abrupt("return", this.fingerprint().then(function (fingerprint) {
                  return _postToTransaction({
                    headers: {
                      'X-Device-Fingerprint': fingerprint
                    }
                  });
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function signInWithCredentials(_x2) {
        return _signInWithCredentials.apply(this, arguments);
      }

      return signInWithCredentials;
    }()
  }, {
    key: "signInWithRedirect",
    value: function () {
      var _signInWithRedirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var opts,
            originalUri,
            additionalParams,
            params,
            _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                originalUri = opts.originalUri, additionalParams = __rest(opts, ["originalUri"]);

                if (!this._pending.handleLogin) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return");

              case 4:
                this._pending.handleLogin = true;
                _context3.prev = 5;

                if (originalUri) {
                  this.setOriginalUri(originalUri);
                }

                params = Object.assign({
                  scopes: this.options.scopes || ['openid', 'email', 'profile']
                }, additionalParams);
                _context3.next = 10;
                return this.token.getWithRedirect(params);

              case 10:
                _context3.prev = 10;
                this._pending.handleLogin = false;
                return _context3.finish(10);

              case 13:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[5,, 10, 13]]);
      }));

      function signInWithRedirect() {
        return _signInWithRedirect.apply(this, arguments);
      }

      return signInWithRedirect;
    }()
  }, {
    key: "closeSession",
    value: function closeSession() {
      this.tokenManager.clear();
      return this.session.close().catch(function (e) {
        if (e.name === 'AuthApiError' && e.errorCode === 'E0000007') {
          return null;
        }

        throw e;
      });
    }
  }, {
    key: "revokeAccessToken",
    value: function () {
      var _revokeAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(accessToken) {
        var accessTokenKey;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (accessToken) {
                  _context4.next = 6;
                  break;
                }

                _context4.next = 3;
                return this.tokenManager.getTokens();

              case 3:
                accessToken = _context4.sent.accessToken;
                accessTokenKey = this.tokenManager.getStorageKeyByType('accessToken');
                this.tokenManager.remove(accessTokenKey);

              case 6:
                if (accessToken) {
                  _context4.next = 8;
                  break;
                }

                return _context4.abrupt("return", Promise.resolve(null));

              case 8:
                return _context4.abrupt("return", this.token.revoke(accessToken));

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function revokeAccessToken(_x3) {
        return _revokeAccessToken.apply(this, arguments);
      }

      return revokeAccessToken;
    }()
  }, {
    key: "revokeRefreshToken",
    value: function () {
      var _revokeRefreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(refreshToken) {
        var refreshTokenKey;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (refreshToken) {
                  _context5.next = 6;
                  break;
                }

                _context5.next = 3;
                return this.tokenManager.getTokens();

              case 3:
                refreshToken = _context5.sent.refreshToken;
                refreshTokenKey = this.tokenManager.getStorageKeyByType('refreshToken');
                this.tokenManager.remove(refreshTokenKey);

              case 6:
                if (refreshToken) {
                  _context5.next = 8;
                  break;
                }

                return _context5.abrupt("return", Promise.resolve(null));

              case 8:
                return _context5.abrupt("return", this.token.revoke(refreshToken));

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function revokeRefreshToken(_x4) {
        return _revokeRefreshToken.apply(this, arguments);
      }

      return revokeRefreshToken;
    }()
  }, {
    key: "getSignOutRedirectUrl",
    value: function getSignOutRedirectUrl() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var idToken = options.idToken,
          postLogoutRedirectUri = options.postLogoutRedirectUri,
          state = options.state;

      if (!idToken) {
        idToken = this.tokenManager.getTokensSync().idToken;
      }

      if (!idToken) {
        return '';
      }

      if (!postLogoutRedirectUri) {
        postLogoutRedirectUri = this.options.postLogoutRedirectUri;
      }

      var logoutUrl = getOAuthUrls(this).logoutUrl;
      var idTokenHint = idToken.idToken;
      var logoutUri = logoutUrl + '?id_token_hint=' + encodeURIComponent(idTokenHint);

      if (postLogoutRedirectUri) {
        logoutUri += '&post_logout_redirect_uri=' + encodeURIComponent(postLogoutRedirectUri);
      }

      if (state) {
        logoutUri += '&state=' + encodeURIComponent(state);
      }

      return logoutUri;
    }
  }, {
    key: "signOut",
    value: function () {
      var _signOut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {
        var defaultUri, currentUri, postLogoutRedirectUri, accessToken, refreshToken, revokeAccessToken, revokeRefreshToken, logoutUri;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                options = Object.assign({}, options);
                defaultUri = window.location.origin;
                currentUri = window.location.href;
                postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri || defaultUri;
                accessToken = options.accessToken;
                refreshToken = options.refreshToken;
                revokeAccessToken = options.revokeAccessToken !== false;
                revokeRefreshToken = options.revokeRefreshToken !== false;

                if (revokeRefreshToken && typeof refreshToken === 'undefined') {
                  refreshToken = this.tokenManager.getTokensSync().refreshToken;
                }

                if (revokeAccessToken && typeof accessToken === 'undefined') {
                  accessToken = this.tokenManager.getTokensSync().accessToken;
                }

                if (!options.idToken) {
                  options.idToken = this.tokenManager.getTokensSync().idToken;
                }

                this.tokenManager.clear();

                if (!(revokeRefreshToken && refreshToken)) {
                  _context6.next = 15;
                  break;
                }

                _context6.next = 15;
                return this.revokeRefreshToken(refreshToken);

              case 15:
                if (!(revokeAccessToken && accessToken)) {
                  _context6.next = 18;
                  break;
                }

                _context6.next = 18;
                return this.revokeAccessToken(accessToken);

              case 18:
                logoutUri = this.getSignOutRedirectUrl(Object.assign(Object.assign({}, options), {
                  postLogoutRedirectUri: postLogoutRedirectUri
                }));

                if (logoutUri) {
                  _context6.next = 23;
                  break;
                }

                return _context6.abrupt("return", this.closeSession().then(function () {
                  if (postLogoutRedirectUri === currentUri) {
                    window.location.reload();
                  } else {
                    window.location.assign(postLogoutRedirectUri);
                  }
                }));

              case 23:
                window.location.assign(logoutUri);

              case 24:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function signOut(_x5) {
        return _signOut.apply(this, arguments);
      }

      return signOut;
    }()
  }, {
    key: "webfinger",
    value: function webfinger(opts) {
      var url = '/.well-known/webfinger' + toQueryString(opts);
      var options = {
        headers: {
          'Accept': 'application/jrd+json'
        }
      };
      return get(this, url, options);
    }
  }, {
    key: "isAuthenticated",
    value: function () {
      var _isAuthenticated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var _this$tokenManager$ge, accessToken, idToken, _this$tokenManager$ge2, autoRenew, autoRemove;

        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _this$tokenManager$ge = this.tokenManager.getTokensSync(), accessToken = _this$tokenManager$ge.accessToken, idToken = _this$tokenManager$ge.idToken;
                _this$tokenManager$ge2 = this.tokenManager.getOptions(), autoRenew = _this$tokenManager$ge2.autoRenew, autoRemove = _this$tokenManager$ge2.autoRemove;

                if (!(accessToken && this.tokenManager.hasExpired(accessToken))) {
                  _context7.next = 11;
                  break;
                }

                accessToken = null;

                if (!autoRenew) {
                  _context7.next = 10;
                  break;
                }

                _context7.next = 7;
                return this.tokenManager.renew('accessToken');

              case 7:
                accessToken = _context7.sent;
                _context7.next = 11;
                break;

              case 10:
                if (autoRemove) {
                  this.tokenManager.remove('accessToken');
                }

              case 11:
                if (!(idToken && this.tokenManager.hasExpired(idToken))) {
                  _context7.next = 20;
                  break;
                }

                idToken = null;

                if (!autoRenew) {
                  _context7.next = 19;
                  break;
                }

                _context7.next = 16;
                return this.tokenManager.renew('idToken');

              case 16:
                idToken = _context7.sent;
                _context7.next = 20;
                break;

              case 19:
                if (autoRemove) {
                  this.tokenManager.remove('idToken');
                }

              case 20:
                return _context7.abrupt("return", !!(accessToken && idToken));

              case 21:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function isAuthenticated() {
        return _isAuthenticated.apply(this, arguments);
      }

      return isAuthenticated;
    }()
  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var _this$tokenManager$ge3, idToken, accessToken;

        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _this$tokenManager$ge3 = this.tokenManager.getTokensSync(), idToken = _this$tokenManager$ge3.idToken, accessToken = _this$tokenManager$ge3.accessToken;
                return _context8.abrupt("return", this.token.getUserInfo(accessToken, idToken));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getUser() {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
  }, {
    key: "getIdToken",
    value: function getIdToken() {
      var _this$tokenManager$ge4 = this.tokenManager.getTokensSync(),
          idToken = _this$tokenManager$ge4.idToken;

      return idToken ? idToken.idToken : undefined;
    }
  }, {
    key: "getAccessToken",
    value: function getAccessToken() {
      var _this$tokenManager$ge5 = this.tokenManager.getTokensSync(),
          accessToken = _this$tokenManager$ge5.accessToken;

      return accessToken ? accessToken.accessToken : undefined;
    }
  }, {
    key: "getRefreshToken",
    value: function getRefreshToken() {
      var _this$tokenManager$ge6 = this.tokenManager.getTokensSync(),
          refreshToken = _this$tokenManager$ge6.refreshToken;

      return refreshToken ? refreshToken.refreshToken : undefined;
    }
  }, {
    key: "storeTokensFromRedirect",
    value: function () {
      var _storeTokensFromRedirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var _yield$this$token$par, tokens;

        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.token.parseFromUrl();

              case 2:
                _yield$this$token$par = _context9.sent;
                tokens = _yield$this$token$par.tokens;
                this.tokenManager.setTokens(tokens);

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function storeTokensFromRedirect() {
        return _storeTokensFromRedirect.apply(this, arguments);
      }

      return storeTokensFromRedirect;
    }()
  }, {
    key: "setOriginalUri",
    value: function setOriginalUri(originalUri, state) {
      var sessionStorage = storageUtil.getSessionStorage();
      sessionStorage.setItem(REFERRER_PATH_STORAGE_KEY, originalUri);
      state = state || this.options.state;

      if (state) {
        var sharedStorage = this.storageManager.getOriginalUriStorage();
        sharedStorage.setItem(state, originalUri);
      }
    }
  }, {
    key: "getOriginalUri",
    value: function getOriginalUri(state) {
      state = state || this.options.state;

      if (state) {
        var sharedStorage = this.storageManager.getOriginalUriStorage();
        var originalUri = sharedStorage.getItem(state);

        if (originalUri) {
          return originalUri;
        }
      }

      var storage = storageUtil.getSessionStorage();
      return storage ? storage.getItem(REFERRER_PATH_STORAGE_KEY) : undefined;
    }
  }, {
    key: "removeOriginalUri",
    value: function removeOriginalUri(state) {
      var storage = storageUtil.getSessionStorage();
      storage.removeItem(REFERRER_PATH_STORAGE_KEY);
      state = state || this.options.state;

      if (state) {
        var sharedStorage = this.storageManager.getOriginalUriStorage();
        sharedStorage.removeItem(state);
      }
    }
  }, {
    key: "isLoginRedirect",
    value: function isLoginRedirect$1() {
      return isLoginRedirect(this);
    }
  }, {
    key: "handleLoginRedirect",
    value: function () {
      var _handleLoginRedirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(tokens, originalUri) {
        var state, oAuthResponse, restoreOriginalUri;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                state = this.options.state;

                if (!tokens) {
                  _context10.next = 6;
                  break;
                }

                this.tokenManager.setTokens(tokens);
                originalUri = originalUri || this.getOriginalUri(this.options.state);
                _context10.next = 17;
                break;

              case 6:
                if (!this.isLoginRedirect()) {
                  _context10.next = 16;
                  break;
                }

                _context10.next = 9;
                return parseOAuthResponseFromUrl(this, {});

              case 9:
                oAuthResponse = _context10.sent;
                state = oAuthResponse.state;
                originalUri = originalUri || this.getOriginalUri(state);
                _context10.next = 14;
                return this.storeTokensFromRedirect();

              case 14:
                _context10.next = 17;
                break;

              case 16:
                return _context10.abrupt("return");

              case 17:
                _context10.next = 19;
                return this.authStateManager.updateAuthState();

              case 19:
                this.removeOriginalUri(state);
                restoreOriginalUri = this.options.restoreOriginalUri;

                if (!restoreOriginalUri) {
                  _context10.next = 26;
                  break;
                }

                _context10.next = 24;
                return restoreOriginalUri(this, originalUri);

              case 24:
                _context10.next = 27;
                break;

              case 26:
                window.location.replace(originalUri);

              case 27:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function handleLoginRedirect(_x6, _x7) {
        return _handleLoginRedirect.apply(this, arguments);
      }

      return handleLoginRedirect;
    }()
  }, {
    key: "isPKCE",
    value: function isPKCE() {
      return !!this.options.pkce;
    }
  }, {
    key: "hasResponseType",
    value: function hasResponseType(responseType) {
      var hasResponseType = false;

      if (Array.isArray(this.options.responseType) && this.options.responseType.length) {
        hasResponseType = this.options.responseType.indexOf(responseType) >= 0;
      } else {
        hasResponseType = this.options.responseType === responseType;
      }

      return hasResponseType;
    }
  }, {
    key: "isAuthorizationCodeFlow",
    value: function isAuthorizationCodeFlow() {
      return this.hasResponseType('code');
    }
  }, {
    key: "getIssuerOrigin",
    value: function getIssuerOrigin() {
      return this.options.issuer.split('/oauth2/')[0];
    }
  }, {
    key: "forgotPassword",
    value: function forgotPassword(opts) {
      return postToTransaction(this, '/api/v1/authn/recovery/password', opts);
    }
  }, {
    key: "unlockAccount",
    value: function unlockAccount(opts) {
      return postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);
    }
  }, {
    key: "verifyRecoveryToken",
    value: function verifyRecoveryToken(opts) {
      return postToTransaction(this, '/api/v1/authn/recovery/token', opts);
    }
  }]);

  return OktaAuth;
}();

OktaAuth.features = OktaAuth.prototype.features = features;
Object.assign(OktaAuth, {
  constants: constants,
  isInteractionRequiredError: isInteractionRequiredError
});

export { ACCESS_TOKEN_STORAGE_KEY, AuthApiError, AuthPollStopError, AuthSdkError, AuthStateManager, AuthTransaction, AuthenticatorKey, CACHE_STORAGE_NAME, DEFAULT_CACHE_DURATION, DEFAULT_CODE_CHALLENGE_METHOD, DEFAULT_MAX_CLOCK_SKEW, DEFAULT_POLLING_DELAY, EVENT_ADDED, EVENT_ERROR, EVENT_EXPIRED, EVENT_REMOVED, EVENT_RENEWED, IDX_API_VERSION, IDX_RESPONSE_STORAGE_NAME, ID_TOKEN_STORAGE_KEY, INITIAL_AUTH_STATE, IdxFeature, IdxStatus, MAX_VERIFIER_LENGTH, MIN_VERIFIER_LENGTH, OAuthError, ORIGINAL_URI_STORAGE_NAME, OktaAuth, PKCE_STORAGE_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_STATE_COOKIE_NAME, REFERRER_PATH_STORAGE_KEY, REFRESH_TOKEN_STORAGE_KEY, SHARED_TRANSACTION_STORAGE_NAME, STATE_TOKEN_KEY_NAME, TOKEN_STORAGE_NAME, TRANSACTION_STORAGE_NAME, TokenManager, TransactionState, addListener, addPostMessageListener, addStateToken, bind, buildAuthorizeParams, clone, convertTokenParamsToOAuthParams, index as crypto, decodeToken, delay, deprecate, deprecateWrap, exchangeCodeForTokens, extend, find, genRandomString, generateNonce, generateState, getConsole, getDefaultTokenParams, getHashOrSearch, getKey, getLink, getNativeConsole, getOAuthBaseUrl, getOAuthDomain, getOAuthUrls, getPollFn, getStateToken, getToken, getUserInfo, getWellKnown, getWithPopup, getWithRedirect, getWithoutPrompt, handleOAuthResponse, hasAuthorizationCode, hasErrorInUrl, hasInteractionCode, hasTokensInHash, introspect$1 as introspect, isAbsoluteUrl, isAccessToken, isAuthApiError, isAuthorizationCodeError, isCodeFlow, isCustomAuthTransactionMeta, isEmailVerifyCallback, isFunction, isIDToken, isIdxTransactionMeta, isInteractionRequired, isInteractionRequiredError, isLoginRedirect, isNumber, isOAuthTransactionMeta, isObject, isPKCETransactionMeta, isPromise, isRedirectUri, isRefreshToken, isRefreshTokenError, isSameRefreshToken, isString, isToken, isTransactionMeta, isoToUTCString, loadFrame, loadPopup, omit, parseEmailVerifyCallback, parseFromUrl, PKCE as pkce, postRefreshToken, postToTokenEndpoint, postToTransaction, prepareTokenParams, removeListener, removeNils, removeTrailingSlash, renewToken, renewTokens, renewTokensWithRefresh, resumeTransaction, revokeToken, toAbsoluteUrl, toQueryString, toRelativeUrl, transactionExists, transactionStatus, urlParamsToObject, validateClaims, validateToken, verifyToken, warn };
//# sourceMappingURL=index.js.map
